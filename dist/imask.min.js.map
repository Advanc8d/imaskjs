{"version":3,"sources":["utils.js","resolvers/mask-resolver.js","resolvers/func-resolver.js","resolvers/regexp-resolver.js","resolvers/pattern-resolver.js","imask.js"],"names":["isString","str","String","conform","res","fallback","arguments","length","undefined","MaskResolver","mask","value","FuncResolver","this","apply","RegExpResolver","test","PatternResolver","pattern","_definitions","DEFINITIONS","_charDefs","_hollows","i","ch","type","_this","DEF_TYPES","INPUT","FIXED","push","_resolvers","defKey","IMask","ResolverFactory","tail","placeholderBuffer","hollows","slice","ci","defIndex","def","resolver","char","chres","resolve","startDefIndex","input","di","indexOf","head","inserted","insertSteps","details","substring","startChangePos","insertedCount","substr","tailInput","_extractInput","removedCount","filter","h","_generateInsertSteps","_step","reverse","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","step","result","_tryAppendTail","_result","cursorPos","oldSelection","end","hasHollows","includes","el","opts","charResolver","charMask","addEventListener","_saveCursor","bind","_processInput","_onDrop","rawValue","ev","preventDefault","stopPropagation","_oldValue","_oldSelection","selectionStart","selectionEnd","_conform","handler","inputValue","split","map","args","Array","_len","_key","_charResolver","concat","join","Math","min","start","max","resUnmasked","unmaskedValue","RegExp","Function","window"],"mappings":"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","file":"imask.min.js","sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","export default\r\nclass MaskResolver {\r\n  constructor (mask) {\r\n    this.mask = mask;\r\n  }\r\n\r\n  resolve (str) {\r\n    return str;\r\n  };\r\n\r\n  get unmaskedValue () {}\r\n  set unmaskedValue (value) {}\r\n}\r\n","import MaskResolver from './mask-resolver';\r\n\r\nexport default\r\nclass FuncResolver extends MaskResolver {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\n\r\nexport default\r\nclass RegExpResolver extends MaskResolver {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\nimport {conform} from '../utils';\r\n\r\n\r\nexport default\r\nclass PatternResolver extends MaskResolver {\r\n  constructor (pattern) {\r\n    super(pattern);\r\n    this._definitions = PatternResolver.DEFINITIONS;\r\n    this._charDefs = [];\r\n    this._hollows = [];\r\n\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = ch in this._definitions ?\r\n        PatternResolver.DEF_TYPES.INPUT :\r\n        PatternResolver.DEF_TYPES.FIXED;\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: false,  // TODO\r\n        unmasking: type === PatternResolver.DEF_TYPES.INPUT\r\n      });\r\n    }\r\n\r\n    this._resolvers = {};\r\n    for (var defKey in this._definitions) {\r\n      this._resolvers[defKey] = IMask.ResolverFactory(this._definitions[defKey]);\r\n    }\r\n  }\r\n\r\n  _tryAppendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    for (var ci=0, defIndex=str.length; ci<tail.length; ++defIndex) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[defIndex];\r\n\r\n      if (!def) return;\r\n\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, defIndex, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          chres = '_';\r\n          hollows.push(defIndex);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows];\r\n  }\r\n\r\n  _extractInput (str, startDefIndex=0) {\r\n    var input = '';\r\n    for (var di=startDefIndex, ci=0; ci<str.length; ++ci, ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT &&\r\n        this._hollows.indexOf(di) < 0) input += ch;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [res];\r\n    for (var ci=0, di=head.length; ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      var chres = '';\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, ci) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          ++di;\r\n          res += placeholderBuffer; placeholderBuffer = '';\r\n          chres = conform(chres, ch);\r\n        }\r\n        ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n\r\n      res += chres;\r\n      insertSteps[ci] = res;\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    // TODO\r\n    if (!details) return '';\r\n    // console.log(details);\r\n\r\n    var head = str.substring(0, details.startChangePos);\r\n    var tail = str.substring(details.startChangePos + details.insertedCount);\r\n    var inserted = str.substr(details.startChangePos, details.insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, details.startChangePos + details.removedCount);\r\n\r\n    // remove hollows after cursor\r\n    this._hollows = this._hollows.filter(h => h < details.startChangePos);\r\n\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n\r\n    var res = head;\r\n    for (var step of insertSteps.reverse()) {\r\n      var result = this._tryAppendTail(step, tailInput);\r\n      if (result) {\r\n        [res, this._hollows] = result;\r\n        details.cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // append fixed at end\r\n    if (details.oldSelection.end <= details.cursorPos) { // if not backspace\r\n      for (;; ++details.cursorPos) {\r\n        var def = this._charDefs[details.cursorPos];\r\n        if (!def || def.type === PatternResolver.DEF_TYPES.INPUT) break;\r\n        if (details.cursorPos >= res.length) res += def.char;\r\n      }\r\n    }\r\n\r\n    // remove head fixed and hollows\r\n    if (!inserted && details.cursorPos === res.length) { // if removed at end\r\n      var di = details.cursorPos - 1;\r\n      var hasHollows = false;\r\n      for (; di > 0; --di) {\r\n        var def = this._charDefs[di];\r\n        if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n          if (this._hollows.includes(di)) hasHollows = true;\r\n          else break;\r\n        }\r\n      }\r\n      if (hasHollows) res = res.slice(0, di);\r\n    }\r\n\r\n    return res;\r\n  }\r\n}\r\nPatternResolver.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternResolver.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\n","import {conform, isString} from './utils';\r\n\r\nimport MaskResolver from './resolvers/mask-resolver';\r\nimport FuncResolver from './resolvers/func-resolver';\r\nimport RegExpResolver from './resolvers/regexp-resolver';\r\nimport PatternResolver from './resolvers/pattern-resolver';\r\n\r\n// TODO\r\n// - empty placeholder (+ as option)\r\n// - escape defs\r\n// - !progressive\r\n// - validateOnly\r\n// - get/set unmasked\r\n// - add comments\r\n\r\n\r\n// TODO opts = {\r\n//   placeholder: '_',\r\n//   definitions: {},\r\n//   progressive: true,\r\n//   validateOnly: false\r\n// }\r\n\r\n\r\nexport default\r\nclass IMask {\r\n  constructor (el, opts={}) {\r\n    var inputValue = el.value;\r\n\r\n    this.el = el;\r\n    this.resolver = IMask.ResolverFactory(opts.mask);\r\n    this.charResolver = IMask.ResolverFactory(opts.charMask);\r\n\r\n    el.addEventListener('keydown', this._saveCursor.bind(this));\r\n    el.addEventListener('input', this._processInput.bind(this));\r\n    el.addEventListener('drop', this._onDrop.bind(this));\r\n    this._saveCursor();\r\n    this._processInput();\r\n\r\n    // refresh\r\n    this.rawValue = this.el.value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  _saveCursor (ev) {\r\n    this._oldValue = this.el.value;\r\n    this._oldSelection = {\r\n      start: this.el.selectionStart,\r\n      end: this.el.selectionEnd\r\n    }\r\n  }\r\n\r\n  _processInput (ev) {\r\n    this._conform();\r\n  }\r\n\r\n  on (ev, handler) {\r\n\r\n  }\r\n\r\n  _conform () {\r\n    var inputValue = this.el.value;\r\n    // use selectionEnd for handle Undo\r\n    var cursorPos = this.el.selectionEnd;\r\n\r\n    let res = inputValue\r\n      .split('')\r\n      .map((ch, ...args) => {\r\n        var res = this.charResolver.resolve(ch, ...args);\r\n        return conform(res, ch);\r\n      })\r\n      .join('');\r\n\r\n    var startChangePos = Math.min(cursorPos, this._oldSelection.start);\r\n    // var maxCursorPos = Math.max(cursorPos, this._oldSelection.end);\r\n    var details = {\r\n      startChangePos: startChangePos,\r\n      oldSelection: this._oldSelection,\r\n      cursorPos: cursorPos,\r\n      // Math.max for opposite operation\r\n      removedCount: Math.max((this._oldSelection.end - startChangePos) ||\r\n        // for Delete\r\n        this._oldValue.length - inputValue.length, 0),\r\n      insertedCount: cursorPos - startChangePos,\r\n      oldValue: this._oldValue\r\n    };\r\n\r\n    res = conform(this.resolver.resolve(res, details),\r\n      res,\r\n      this._oldValue);\r\n    if (res !== inputValue) {\r\n      // var cursorPos = this.el.selectionStart;\r\n      // var afterCursorCount = inputValue.length - cursorPos;\r\n      // var cursorPos = res.length - afterCursorCount;\r\n      this.el.value = res;\r\n      if (details.cursorPos != null) cursorPos = details.cursorPos;\r\n      this.el.selectionStart = this.el.selectionEnd = cursorPos;\r\n    }\r\n  }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    var details = {\r\n      startChangePos: 0,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: this.el.value.length\r\n      },\r\n      removedCount: this.el.value.length,\r\n      insertedCount: str.length,\r\n      oldValue: this.el.value\r\n    };\r\n    this.el.value = conform(this.resolver.resolve(str, details), this.el.value);\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    const resUnmasked = this.resolver.unmaskedValue;\r\n    return resUnmasked != null ? resUnmasked : this.el.value;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.resolver.unmaskedValue = value;\r\n  }\r\n\r\n  static ResolverFactory (mask) {\r\n    if (mask instanceof RegExp) return new RegExpResolver(mask);\r\n    if (mask instanceof Function) return new FuncResolver(mask);\r\n    if (isString(mask)) return new PatternResolver(mask);\r\n    return new MaskResolver(mask);\r\n  }\r\n}\r\nIMask.MaskResolver = MaskResolver;\r\nIMask.FuncResolver = FuncResolver;\r\nIMask.RegExpResolver = RegExpResolver;\r\nIMask.PatternResolver = PatternResolver;\r\nwindow.IMask = IMask;\r\n"]}