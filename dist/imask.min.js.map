{"version":3,"sources":["utils.js","resolvers/mask-resolver.js","resolvers/func-resolver.js","resolvers/regexp-resolver.js","resolvers/pattern-resolver.js","imask.js"],"names":["isString","str","String","conform","res","fallback","arguments","length","undefined","MaskResolver","mask","FuncResolver","this","apply","RegExpResolver","test","PatternResolver","pattern","opts","_charPlaceholder","charPlaceholder","DEFAULT_CHAR_PLACEHOLDER","_definitions","DEFINITIONS","_charDefs","_hollows","unmaskingBlock","optionalBlock","i","ch","type","_this","DEF_TYPES","INPUT","FIXED","unmasking","optional","push","_resolvers","defKey","IMask","ResolverFactory","tail","placeholderBuffer","hollows","slice","ci","defIndex","def","resolver","char","chres","resolve","startDefIndex","input","di","indexOf","head","inserted","insertSteps","details","cursorPos","oldSelection","oldValue","startChangePos","Math","min","start","removedCount","max","end","insertedCount","substring","substr","tailInput","_extractInput","filter","h","_generateInsertSteps","_step","reverse","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","step","value","result","_tryAppendTail","_result","hasHollows","includes","unmasked","ph","el","charResolver","charMask","_listeners","addEventListener","_saveCursor","bind","_processInput","_onDrop","rawValue","ev","preventDefault","stopPropagation","_oldValue","_oldSelection","selectionStart","selectionEnd","_conform","handler","hIndex","splice","inputValue","split","map","args","Array","_len","_key","_charResolver","concat","join","listeners","accept","forEach","l","extractUnmasked","resolveUnmasked","RegExp","Function","window"],"mappings":"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","file":"imask.min.js","sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","export default\r\nclass MaskResolver {\r\n  constructor (mask) { this.mask = mask; }\r\n\r\n  resolve (str) { return str; }\r\n  resolveUnmasked (str) { return str; }\r\n\r\n  extractUnmasked (str) { return str; }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\n\r\nexport default\r\nclass FuncResolver extends MaskResolver {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\n\r\nexport default\r\nclass RegExpResolver extends MaskResolver {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\nimport {conform} from '../utils';\r\n\r\n\r\nexport default\r\nclass PatternResolver extends MaskResolver {\r\n  constructor (pattern, opts) {\r\n    super(pattern);\r\n    this._charPlaceholder = opts.charPlaceholder || PatternResolver.DEFAULT_CHAR_PLACEHOLDER;\r\n    this._definitions = PatternResolver.DEFINITIONS;\r\n    this._charDefs = [];\r\n    this._hollows = [];\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in this._definitions ?\r\n        PatternResolver.DEF_TYPES.INPUT :\r\n        PatternResolver.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternResolver.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternResolver.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternResolver.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._resolvers = {};\r\n    for (var defKey in this._definitions) {\r\n      this._resolvers[defKey] = IMask.ResolverFactory(this._definitions[defKey]);\r\n    }\r\n  }\r\n\r\n  _tryAppendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    for (var ci=0, defIndex=str.length; ci<tail.length; ++defIndex) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[defIndex];\r\n\r\n      if (!def) return;\r\n\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, defIndex, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          chres = this.charPlaceholder;\r\n          hollows.push(defIndex);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows];\r\n  }\r\n\r\n  _extractInput (str, startDefIndex=0) {\r\n    var input = '';\r\n    for (var di=startDefIndex, ci=0; ci<str.length && di<this._charDefs.length; ++ci, ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT &&\r\n        this._hollows.indexOf(di) < 0) input += ch;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [res];\r\n    for (var ci=0, di=head.length; ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      var chres = '';\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        chres = resolver.resolve(ch, ci) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          ++di;\r\n          res += placeholderBuffer; placeholderBuffer = '';\r\n          chres = conform(chres, ch);\r\n        }\r\n        ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n\r\n      res += chres;\r\n      insertSteps[ci] = res;\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    // TODO\r\n    if (!details) return '';\r\n    // console.log(details);\r\n\r\n\r\n    var cursorPos = details.cursorPos;\r\n    var oldSelection = details.oldSelection;\r\n    var oldValue = details.oldValue;\r\n    var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n    // Math.max for opposite operation\r\n    var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n      // for Delete\r\n      oldValue.length - str.length, 0);\r\n    var insertedCount = cursorPos - startChangePos;\r\n\r\n\r\n    var head = str.substring(0, startChangePos);\r\n    var tail = str.substring(startChangePos + insertedCount);\r\n    var inserted = str.substr(startChangePos, insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    this._hollows = this._hollows.filter(h => h < startChangePos);\r\n\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n\r\n    var res = head;\r\n    for (var step of insertSteps.reverse()) {\r\n      var result = this._tryAppendTail(step, tailInput);\r\n      if (result) {\r\n        [res, this._hollows] = result;\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var def;\r\n    // append fixed at end\r\n    if (oldSelection.end <= cursorPos) { // if not backspace\r\n      for (;; ++cursorPos) {\r\n        def = this._charDefs[cursorPos];\r\n        if (!def || def.type === PatternResolver.DEF_TYPES.INPUT) break;\r\n        if (cursorPos >= res.length) res += def.char;\r\n      }\r\n    }\r\n\r\n    // remove head fixed and hollows\r\n    if (!inserted && cursorPos === res.length) { // if removed at end\r\n      var di = cursorPos - 1;\r\n      var hasHollows = false;\r\n      for (; di > 0; --di) {\r\n        def = this._charDefs[di];\r\n        if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n          if (this._hollows.includes(di)) hasHollows = true;\r\n          else break;\r\n        }\r\n      }\r\n      if (hasHollows) res = res.slice(0, di);\r\n    }\r\n\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  resolveUnmasked (str) {\r\n    var res = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length;) {\r\n      var def = this._charDefs[di];\r\n      var ch = str[ci];\r\n\r\n      var chres = '';\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        if (!this._hollows.includes(di) && this._resolvers[def.char].resolve(ch, ci)) {\r\n          chres = ch;\r\n          ++di;\r\n        }\r\n        ++ci;\r\n      } else {\r\n        chres = def.char;\r\n        if (def.unmasking && def.char === ch) ++ci;\r\n        ++di;\r\n      }\r\n      res += chres;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  extractUnmasked (str) {\r\n    var unmasked = '';\r\n    for (var ci=0; ci<str.length && ci<this._charDefs.length; ++ci) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[ci];\r\n\r\n      if (def.unmasking && !this._hollows.includes(ci) &&\r\n        (def.type === PatternResolver.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  get charPlaceholder () {\r\n    return this._charPlaceholder;\r\n  }\r\n\r\n  set charPlaceholder (ph) {\r\n    // TODO\r\n  }\r\n}\r\nPatternResolver.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternResolver.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternResolver.DEFAULT_CHAR_PLACEHOLDER = '_';\r\n","import {conform, isString} from './utils';\r\n\r\nimport MaskResolver from './resolvers/mask-resolver';\r\nimport FuncResolver from './resolvers/func-resolver';\r\nimport RegExpResolver from './resolvers/regexp-resolver';\r\nimport PatternResolver from './resolvers/pattern-resolver';\r\n\r\n// TODO\r\n// - empty placeholder\r\n// - !progressive\r\n// - validateOnly\r\n// - add comments\r\n\r\n\r\nexport default\r\nclass IMask {\r\n  constructor (el, opts={}) {\r\n    this.el = el;\r\n    this.resolver = IMask.ResolverFactory(opts.mask, opts);\r\n    this.charResolver = IMask.ResolverFactory(opts.charMask, opts);\r\n\r\n    this._listeners = {};\r\n\r\n    el.addEventListener('keydown', this._saveCursor.bind(this));\r\n    el.addEventListener('input', this._processInput.bind(this));\r\n    el.addEventListener('drop', this._onDrop.bind(this));\r\n    this._saveCursor();\r\n    this._processInput();\r\n\r\n    // refresh\r\n    this.rawValue = this.el.value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  _saveCursor (ev) {\r\n    this._oldValue = this.el.value;\r\n    this._oldSelection = {\r\n      start: this.el.selectionStart,\r\n      end: this.el.selectionEnd\r\n    }\r\n  }\r\n\r\n  _processInput (ev) {\r\n    this._conform();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n  }\r\n\r\n  _conform () {\r\n    var inputValue = this.el.value;\r\n    // use selectionEnd for handle Undo\r\n    var cursorPos = this.el.selectionEnd;\r\n\r\n    let res = inputValue\r\n      .split('')\r\n      .map((ch, ...args) => {\r\n        var res = this.charResolver.resolve(ch, ...args);\r\n        return conform(res, ch);\r\n      })\r\n      .join('');\r\n\r\n    // var maxCursorPos = Math.max(cursorPos, this._oldSelection.end);\r\n    var details = {\r\n      oldSelection: this._oldSelection,\r\n      cursorPos: cursorPos,\r\n      oldValue: this._oldValue\r\n    };\r\n\r\n    res = conform(this.resolver.resolve(res, details),\r\n      res,\r\n      this._oldValue);\r\n    if (res !== inputValue) {\r\n      // var cursorPos = this.el.selectionStart;\r\n      // var afterCursorCount = inputValue.length - cursorPos;\r\n      // var cursorPos = res.length - afterCursorCount;\r\n      this.el.value = res;\r\n      this.el.selectionStart = this.el.selectionEnd = details.cursorPos;\r\n    }\r\n\r\n    if (res !== this._oldValue) {\r\n      var listeners = this._listeners.accept || [];\r\n      listeners.forEach(l => l());\r\n    }\r\n  }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    var details = {\r\n      startChangePos: 0,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: this.el.value.length\r\n      },\r\n      removedCount: this.el.value.length,\r\n      insertedCount: str.length,\r\n      oldValue: this.el.value\r\n    };\r\n    this.el.value = conform(this.resolver.resolve(str, details), this.el.value);\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.resolver.extractUnmasked(this.el.value);\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.el.value = this.resolver.resolveUnmasked(value);\r\n  }\r\n\r\n  static ResolverFactory (mask, opts) {\r\n    if (mask instanceof MaskResolver) return mask;\r\n    if (mask instanceof RegExp) return new RegExpResolver(mask, opts);\r\n    if (mask instanceof Function) return new FuncResolver(mask, opts);\r\n    if (isString(mask)) return new PatternResolver(mask, opts);\r\n    return new MaskResolver(mask, opts);\r\n  }\r\n}\r\nIMask.MaskResolver = MaskResolver;\r\nIMask.FuncResolver = FuncResolver;\r\nIMask.RegExpResolver = RegExpResolver;\r\nIMask.PatternResolver = PatternResolver;\r\nwindow.IMask = IMask;\r\n"]}