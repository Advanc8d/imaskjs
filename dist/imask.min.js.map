{"version":3,"file":"imask.min.js","sources":["../src/core/utils.js","../src/masked/factory.js","../src/imask.js","../src/masked/base.js","../src/masked/pattern/definition.js","../src/masked/pattern.js","../src/masked/number.js","../src/core/action-details.js","../src/controls/input.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n\r\nexport\r\nfunction indexInDirection (pos, direction) {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\nexport\r\nfunction refreshValueOnSet (target, key, descriptor) {\r\n  const method = descriptor.set;\r\n  descriptor.set = function (...args) {\r\n    return this.withValueRefresh(method.bind(this, ...args));\r\n  };\r\n}\r\n\r\nexport\r\nfunction escapeRegExp(str) {\r\n  return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\r\n}\r\n","import {isString} from '../core/utils';\r\n\r\nimport Masked from './base';\r\nimport MaskedPattern from './pattern';\r\n\r\n\r\nexport default\r\nfunction createMask (opts) {\r\n  const mask = opts.mask;\r\n  if (mask instanceof Masked) return mask;\r\n  if (mask instanceof RegExp) return new Masked({\r\n    ...opts,\r\n    validate: (masked) => mask.test(masked.value)\r\n  });\r\n  if (isString(mask)) return new MaskedPattern(opts);\r\n  if (mask.prototype instanceof Masked) return new mask(opts);\r\n  if (mask instanceof Function) return new Masked({\r\n    ...opts,\r\n    validate: mask\r\n  });\r\n  return new Masked(opts);\r\n}\r\n","import Masked from './masked/base';\r\nimport MaskedPattern from './masked/pattern';\r\nimport MaskedNumber from './masked/number';\r\n\r\nimport InputMask from './controls/input';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n\r\nIMask.InputMask = InputMask;\r\n\r\nIMask.Masked = Masked;\r\nIMask.MaskedPattern = MaskedPattern;\r\nIMask.MaskedNumber = MaskedNumber;\r\n\r\nwindow.IMask = IMask;\r\n","import {refreshValueOnSet} from '../core/utils';\r\n\r\n\r\nexport default\r\nclass Masked {\r\n  constructor ({mask, validate}) {\r\n    this._value = '';\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  get mask () {\r\n    return this._mask;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n  }\r\n\r\n  _validate (soft) {\r\n    return this.validate(this, soft);\r\n  }\r\n\r\n  clone () {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value) {\r\n    this.reset();\r\n    this.append(value, true);\r\n    this._appendTail();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmask();\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.reset();\r\n    this.append(value);\r\n    this._appendTail();\r\n  }\r\n\r\n  get isComplete () {\r\n    return true;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, /* direction */) {\r\n    return cursorPos;\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length) {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  _extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this.extractInput(fromPos, toPos);\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return !tail || this.append(tail);\r\n  }\r\n\r\n  append (str, soft) {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue = this.clone();\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this._validate(soft) === false) {\r\n        Object.assign(this, consistentValue);\r\n        if (!soft) return false;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    // TODO refactor\r\n    let appendCount = 0;\r\n    let consistentValue = this.clone();\r\n    let consistentAppended;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appended = this.append(ch, true);\r\n      consistentAppended = this.clone();\r\n      const tailAppended = appended !== false && this._appendTail(tail) !== false;\r\n      if (tailAppended === false || this._validate(true) === false) {\r\n        Object.assign(this, consistentValue);\r\n        break;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n      Object.assign(this, consistentAppended);\r\n      appendCount += appended;\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n    this._appendTail(tail);\r\n\r\n    return appendCount;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.value;\r\n  }\r\n\r\n  // TODO rename - refactor\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n  }\r\n\r\n  withValueRefresh (fn) {\r\n    if (this._refreshing) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.isInitialized ? this.unmaskedValue : null;\r\n\r\n    const ret = fn();\r\n\r\n    if (unmasked != null) this.unmaskedValue = unmasked;\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  commit () {}\r\n\r\n  // TODO\r\n  // resolve (inputRaw) -> outputRaw\r\n\r\n  // TODO\r\n  // insert (str, fromPos, soft)\r\n\r\n  // splice (start, deleteCount, inserted, removeDirection) {\r\n  //   const tailPos = start + deleteCount;\r\n  //   const tail = this._extractTail(tailPos);\r\n\r\n  //   start = this.nearestInputPos(start, removeDirection);\r\n  //   this.clear(start);\r\n  //   return this.appendWithTail(inserted, tail);\r\n  // }\r\n}\r\n","import createMask from '../factory';\r\n\r\n\r\nexport default\r\nclass PatternDefinition {\r\n  constructor(opts) {\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  reset () {\r\n    this.isHollow = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  get isInput () {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  get isHiddenHollow () {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  resolve (ch) {\r\n    if (!this._masked) return false;\r\n    // TODO seems strange\r\n    this._masked.value = ch;\r\n    return this._masked.value;\r\n  }\r\n}\r\n\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","import {conform, DIRECTION, indexInDirection, refreshValueOnSet} from '../core/utils';\r\nimport Masked from './base';\r\nimport PatternDefinition from './pattern/definition';\r\n\r\n\r\nexport default\r\nclass MaskedPattern extends Masked {\r\n  constructor (opts) {\r\n    const {definitions, placeholder} = opts;\r\n    super(opts);\r\n    delete this.isInitialized;\r\n\r\n    this.placeholder = placeholder;\r\n    this.definitions = definitions;\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  get placeholder () {\r\n    return this._placeholder;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...MaskedPattern.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n  }\r\n\r\n  get definitions () {\r\n    return this._definitions;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set definitions (defs) {\r\n    defs = {\r\n      ...PatternDefinition.DEFAULTS,\r\n      ...defs\r\n    };\r\n\r\n    this._definitions = defs;\r\n    this._updateMask();\r\n  }\r\n\r\n  get mask () {\r\n    return this._mask;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n    this._updateMask();\r\n  }\r\n\r\n  _updateMask () {\r\n    const defs = this._definitions;\r\n    this._charDefs = [];\r\n\r\n    const pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      let char = pattern[i];\r\n      let type = !unmaskingBlock && char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        // TODO validation\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        mask: unmasking &&\r\n          (type === PatternDefinition.TYPES.INPUT ?\r\n            defs[char] :\r\n            (m => m.value === char))\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedPattern(this);\r\n    m._value = this.value.slice();\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.some(d =>\r\n      d.isInput && !d.optional && d.isHollow);\r\n  }\r\n\r\n  hiddenHollowsBefore (defIndex) {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  mapDefIndexToPos (defIndex) {\r\n    if (defIndex == null) return;\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  mapPosToDefIndex (pos) {\r\n    if (pos == null) return;\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _unmask () {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.mask && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return (!tail || this.appendChunks(tail)) && this._appendPlaceholder();\r\n  }\r\n\r\n  append (str, soft) {\r\n    const oldValueLength = this.value.length;\r\n\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (!def) return false;\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          const m = this.clone();\r\n          this._value += chres;\r\n          if (!this._validate()) {\r\n            chres = '';\r\n            Object.assign(this, m);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        // if ok - next di\r\n        if (!chres) {\r\n          if (!def.optional && !soft) {\r\n            this._value += this.placeholder.char;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.mask || soft);\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n  }\r\n\r\n  appendChunks (chunks, soft) {\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const [fromDefIndex, input] = chunks[ci];\r\n      if (fromDefIndex != null) this._appendPlaceholder(fromDefIndex);\r\n      if (this.append(input, soft) === false) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _extractTail (fromPos, toPos) {\r\n    return this.extractInputChunks(fromPos, toPos);\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (let ci=fromPos, di=this.mapPosToDefIndex(fromPos); ci<toPos && di < toDefIndex; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  extractInputChunks (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => [\r\n      stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    ]).filter(([stop, input]) => stop != null || input);\r\n  }\r\n\r\n  _appendPlaceholder (toDefIndex) {\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (this.placeholder.show === 'always' || toDefIndex) {\r\n        this._value += !def.isInput ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n  }\r\n\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(to);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n  }\r\n\r\n   nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // search forward\r\n    for (nextdi = indexInDirection(di, direction); 0 <= nextdi && nextdi < this._charDefs.length; di += direction, nextdi += direction) {\r\n      const nextDef = this._charDefs[nextdi];\r\n      if (firstInputIndex == null && nextDef.isInput) firstInputIndex = di;\r\n      if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n      if (nextDef.isInput && !nextDef.isHollow) {\r\n        firstFilledInputIndex = di;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (direction === DIRECTION.LEFT || firstInputIndex == null) {\r\n      // search backwards\r\n      direction = -direction;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (nextdi = indexInDirection(di, direction);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += direction, nextdi += direction)\r\n      {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n}\r\n\r\nMaskedPattern.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.Definition = PatternDefinition;\r\n","import {escapeRegExp, refreshValueOnSet, DIRECTION, indexInDirection} from '../core/utils';\r\nimport Masked from './base';\r\n\r\n\r\nexport default\r\nclass MaskedNumber extends Masked {\r\n  constructor (opts) {\r\n    const {scale, radix, mapToRadix, min, max, signed, thousandsSeparator, postFormat} = {\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    };\r\n\r\n    super(opts);\r\n    delete this.isInitialized;\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n    this.scale = scale;\r\n    this.radix = radix;\r\n    this.mapToRadix = mapToRadix;\r\n    this.signed = signed;\r\n    this.thousandsSeparator = thousandsSeparator;\r\n    this.postFormat = postFormat;\r\n\r\n    this._updateNumberRegExp();\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  _updateNumberRegExp () {\r\n    // TODO refactor?\r\n    let regExpStrSoft = \"^\";\r\n    let regExpStr = \"^\";\r\n\r\n    if (this.signed) {\r\n      regExpStrSoft += \"([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))\";\r\n      regExpStr += \"[+|\\\\-]?\";\r\n    } else {\r\n      regExpStrSoft += \"(0|([1-9]+\\\\d*))\";\r\n    }\r\n    regExpStr += \"\\\\d*\";\r\n\r\n    if (this.scale) {\r\n      regExpStrSoft += \"(\" + this.radix + \"\\\\d{0,\" + this.scale + \"})?\";\r\n      regExpStr += \"(\" + this.radix + \"\\\\d{0,\" + this.scale + \"})?\";\r\n    }\r\n\r\n    regExpStrSoft += \"$\";\r\n    regExpStr += \"$\";\r\n\r\n    this._numberRegExpSoft = new RegExp(regExpStrSoft);\r\n    this._numberRegExp = new RegExp(regExpStr)\r\n  }\r\n\r\n  _extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this._removeThousandsSeparators(super._extractTail(fromPos, toPos));\r\n  }\r\n\r\n  _removeThousandsSeparators (value) {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  _insertThousandsSeparators (value) {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  append (str, soft) {\r\n    return super.append(\r\n      this._removeThousandsSeparators(\r\n        str.replace(this._mapToRadixRegExp, this.radix)),\r\n      soft);\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    const oldValueLength = this.value.length;\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    let removedSeparatorsCount = oldValueLength - this.value.length;\r\n\r\n\r\n    const appended = super.appendWithTail(str, tail);\r\n\r\n\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n\r\n    let beforeTailPos = oldValueLength + appended - removedSeparatorsCount;\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n    let insertedSeparatorsBeforeTailCount = 0;\r\n    for (let pos = 0; pos <= beforeTailPos; ++pos) {\r\n      if (this.value[pos] === this.thousandsSeparator) {\r\n        ++insertedSeparatorsBeforeTailCount;\r\n        ++beforeTailPos;\r\n      }\r\n    }\r\n\r\n    return appended - removedSeparatorsCount + insertedSeparatorsBeforeTailCount;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\r\n    return cursorPos;\r\n  }\r\n\r\n  _validate (soft) {\r\n    const regexp = soft ? this._numberRegExpSoft : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid;\r\n  }\r\n\r\n  commit () {\r\n    // value is already ok, just additional check\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check min bound\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) {\r\n      this.unmaskedValue = '' + validnum;\r\n    }\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.postFormat.normalizeZeros) {\r\n      formatted = this._normalizeZeros(formatted);\r\n    }\r\n\r\n    if (this.postFormat.padFractionalZeros) {\r\n      formatted = this._padFractionalZeros(formatted);\r\n    }\r\n\r\n    this._value = formatted;\r\n  }\r\n\r\n  _normalizeZeros (value) {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n\r\n    // add leading zero\r\n    if (parts[0].length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  _padFractionalZeros (value) {\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    // TODO str.padEnd does not got shimed\r\n    while (parts[1].length < this.scale) parts[1] = parts[1] += '0';\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  get number () {\r\n    let numstr =\r\n      this._removeThousandsSeparators(\r\n        this._normalizeZeros(\r\n          this.unmaskedValue))\r\n      .replace(this.radix, '.');\r\n\r\n    return Number(numstr);\r\n  }\r\n\r\n  set number (number) {\r\n    this.unmaskedValue = \"\" + number;\r\n  }\r\n\r\n  get min () {\r\n    return this._min;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set min (min) {\r\n    this._min = min;\r\n  }\r\n\r\n  get max () {\r\n    return this._max;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set max (max) {\r\n    this._max = max;\r\n  }\r\n\r\n  get scale () {\r\n    return this._scale;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set scale (scale) {\r\n    this._scale = scale;\r\n  }\r\n\r\n  get radix () {\r\n    return this._radix;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set radix (radix) {\r\n    this._radix = radix;\r\n    this._updateNumberRegExp();\r\n  }\r\n\r\n  get signed () {\r\n    return this._signed || (this.min != null && this.min < 0) || (this.max != null && this.max < 0);\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set signed (signed) {\r\n    this._signed = signed;\r\n  }\r\n\r\n  get postFormat () {\r\n    return this._postFormat;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set postFormat (postFormat) {\r\n    this._postFormat = {\r\n      ...MaskedNumber.DEFAULTS.postFormat,\r\n      ...postFormat\r\n    };\r\n  }\r\n\r\n  get mapToRadix () {\r\n    return this._mapToRadix;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set mapToRadix (mapToRadix) {\r\n    this._mapToRadix = mapToRadix;\r\n    this._mapToRadixRegExp = new RegExp(\"[\" +\r\n      mapToRadix.map(escapeRegExp).join(\"\") +\r\n    \"]\", \"g\");\r\n  }\r\n\r\n  get thousandsSeparator () {\r\n    return this._thousandsSeparator;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set thousandsSeparator (thousandsSeparator) {\r\n    this._thousandsSeparator = thousandsSeparator;\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(thousandsSeparator), \"g\");\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: [',', '.'],\r\n  scale: 2,\r\n  postFormat: {\r\n    normalizeZeros: true,\r\n  }\r\n};\r\n","import {DIRECTION} from './utils';\r\n\r\n\r\nexport default\r\nclass ActionDetails {\r\n  constructor (value, cursorPos, oldValue, oldSelection) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n  }\r\n\r\n  get startChangePos () {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  get insertedCount () {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  get inserted () {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  get removedCount () {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  get removed () {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  get head () {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  get tail () {\r\n    this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  get removeDirection () {\r\n    return this.removedCount &&\r\n      ((this.oldSelection.end === this.cursorPos || this.insertedCount) ?\r\n        DIRECTION.RIGHT :\r\n        DIRECTION.LEFT);\r\n  }\r\n}\r\n","import ActionDetails from '../core/action-details';\r\nimport createMask from '../masked/factory';\r\n\r\n\r\nexport default\r\nclass InputMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this.saveSelection = this.saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n    this._alignCursorFriendly = this._alignCursorFriendly.bind(this);\r\n\r\n    this.bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  update (opts) {\r\n    const mask = opts.mask;\r\n    if (mask) this.mask = mask;\r\n\r\n    this.masked.withValueRefresh(() => {\r\n      for (const k in opts) {\r\n        if (k === 'mask') continue;\r\n        this.masked[k] = opts[k];\r\n      }\r\n    });\r\n\r\n    this.updateControl();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  get mask () { return this.masked.mask; }\r\n  set mask (mask) {\r\n    const unmasked = this.masked ? this.masked.unmaskedValue : null;\r\n    if (typeof mask === typeof this.masked.mask) this.masked.mask = mask;\r\n    this.masked = createMask(this.masked);\r\n    if (unmasked != null) this.masked.unmaskedValue = unmasked;\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this._alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this._alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this._alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this.saveSelection();\r\n  }\r\n\r\n  saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this._alignCursor();\r\n  }\r\n\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent('accept');\r\n    if (this.masked.isComplete) this.fireEvent('complete');\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  _alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos);\r\n  }\r\n\r\n  _alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this._alignCursor();\r\n  }\r\n\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    // const insertedCount = this.masked.splice(\r\n    //   this.masked.nearestInputPos(details.startChangePos, details.removeDirection),\r\n    //   details.removed.length,\r\n    //   details.inserted);\r\n\r\n\r\n    const tailPos = details.startChangePos + details.removed.length;\r\n    const tail = this.masked._extractTail(tailPos);\r\n\r\n    const lastInputPos = this.masked.nearestInputPos(details.startChangePos, details.removeDirection);\r\n    this.masked.clear(lastInputPos);\r\n    const insertedCount = this.masked.appendWithTail(details.inserted, tail);\r\n\r\n\r\n    const cursorPos = this.masked.nearestInputPos(\r\n      lastInputPos + insertedCount,\r\n      details.removeDirection);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n  }\r\n\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.commit();\r\n    this.updateControl();\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n"],"names":["isString","str","String","conform","res","fallback","indexInDirection","pos","direction","DIRECTION","LEFT","refreshValueOnSet","target","key","descriptor","method","set","args","this","withValueRefresh","bind","escapeRegExp","replace","createMask","opts","mask","Masked","RegExp","masked","test","value","MaskedPattern","prototype","Function","IMask","el","InputMask","validate","_value","isInitialized","_validate","soft","clone","m","slice","reset","nearestInputPos","cursorPos","extractInput","fromPos","toPos","length","_extractTail","_appendTail","tail","append","oldValueLength","consistentValue","ci","appendWithTail","appendCount","consistentAppended","ch","appended","_unmask","clear","from","to","fn","_refreshing","unmasked","unmaskedValue","ret","commit","_mask","PatternDefinition","_masked","isHollow","resolve","type","TYPES","INPUT","optional","DEFAULTS","definitions","placeholder","_Masked","_this","_updateMask","defs","_definitions","_charDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","i","char","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","push","forEach","d","babelHelpers.extends","_this3","hiddenHollowsBefore","defIndex","filter","isHiddenHollow","mapDefIndexToPos","mapPosToDefIndex","di","def","appendChunks","_appendPlaceholder","resolved","skipped","chres","chunks","fromDefIndex","input","extractInputChunks","toDefIndex","isInput","stopDefIndices","map","stops","s","indexOf","_this4","stop","maxDefIndex","show","initialDefIndex","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","overflow","_placeholder","ph","DEFAULT_PLACEHOLDER","some","Definition","MaskedNumber","scale","radix","mapToRadix","min","max","signed","thousandsSeparator","postFormat","_updateNumberRegExp","regExpStrSoft","regExpStr","_numberRegExpSoft","_numberRegExp","_removeThousandsSeparators","_thousandsSeparatorRegExp","_insertThousandsSeparators","parts","split","join","_mapToRadixRegExp","removedSeparatorsCount","beforeTailPos","insertedSeparatorsBeforeTailCount","nextPos","valid","number","isNaN","validnum","Math","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","numstr","Number","_min","_max","_scale","_radix","_signed","_postFormat","_mapToRadix","_thousandsSeparator","ActionDetails","oldValue","oldSelection","start","startChangePos","substr","insertedCount","end","removedCount","substring","RIGHT","_listeners","_unmaskedValue","saveSelection","_onInput","_onChange","_onDrop","_alignCursor","_alignCursorFriendly","bindEvents","updateValue","update","k","updateControl","on","ev","handler","off","hIndex","splice","addEventListener","unbindEvents","removeEventListener","fireEvent","l","warn","_selection","selectionStart","destroy","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","isComplete","updateCursor","_delayUpdateCursor","_abortUpdateCursor","_changingCursorPos","_cursorChanging","setTimeout","_this2","details","tailPos","removed","lastInputPos","removeDirection","inserted","preventDefault","stopPropagation","selectionEnd","document","activeElement","setSelectionRange","window"],"mappings":"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"}