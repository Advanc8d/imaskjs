{"version":3,"file":"imask.min.es.js","sources":["../src/core/utils.js","../src/masked/factory.js","../src/imask.js","../src/masked/base.js","../src/masked/pattern/definition.js","../src/masked/pattern.js","../src/core/action-details.js","../src/controls/input.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n\r\nexport\r\nfunction indexInDirection (pos, direction) {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\nexport\r\nfunction refreshValueOnSet (target, key, descriptor) {\r\n  const method = descriptor.set;\r\n  descriptor.set = function (...args) {\r\n    return this.withValueRefresh(method.bind(this, ...args));\r\n  };\r\n}\r\n","import {isString} from '../core/utils';\r\n\r\nimport Masked from './base';\r\nimport PatternMasked from './pattern';\r\n\r\n\r\nexport default\r\nfunction createMask (opts) {\r\n  const mask = opts.mask;\r\n  if (mask instanceof Masked) return mask;\r\n  if (mask instanceof RegExp) return new Masked({\r\n    ...opts,\r\n    validate: (masked) => mask.test(masked.value)\r\n  });\r\n  if (isString(mask)) return new PatternMasked(opts);\r\n  if (mask.prototype instanceof Masked) return new mask(opts);\r\n  if (mask instanceof Function) return new Masked({\r\n    ...opts,\r\n    validate: mask\r\n  });\r\n  return new Masked(opts);\r\n}\r\n","import Masked from './masked/base';\r\nimport PatternMasked from './masked/pattern';\r\n\r\nimport InputMask from './controls/input';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  const mask = new InputMask(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.value = el.value;\r\n  return mask;\r\n}\r\n\r\n\r\nIMask.InputMask = InputMask;\r\n\r\nIMask.Masked = Masked;\r\nIMask.PatternMasked = PatternMasked;\r\n\r\nwindow.IMask = IMask;\r\n","import {refreshValueOnSet} from '../core/utils';\r\n\r\n\r\nexport default\r\nclass Masked {\r\n  constructor ({mask, validate}) {\r\n    this._value = '';\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  get mask () {\r\n    return this._mask;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n  }\r\n\r\n  _validate () {\r\n    return this.validate(this);\r\n  }\r\n\r\n  clone () {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value) {\r\n    this.reset();\r\n    this.append(value, true);\r\n    this._appendTail();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmask();\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.reset();\r\n    this.append(value);\r\n    this._appendTail();\r\n  }\r\n\r\n  get isComplete () {\r\n    return true;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, /* direction */) {\r\n    return cursorPos;\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length) {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  _extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this.extractInput(fromPos, toPos);\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return !tail || this.append(tail);\r\n  }\r\n\r\n  append (str, soft) {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue = this.clone();\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this._validate() === false) {\r\n        Object.assign(this, consistentValue);\r\n        if (!soft) return false;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n\r\n  }\r\n\r\n  // TODO\r\n  // insert (str, fromPos, skipUnresolved)\r\n\r\n  appendWithTail (str, tail) {\r\n    // TODO refactor\r\n    let appendCount = 0;\r\n    let consistentValue = this.clone();\r\n    let consistentAppended;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appended = this.append(ch, true);\r\n      consistentAppended = this.clone();\r\n      const tailAppended = appended !== false && this._appendTail(tail) !== false;\r\n      if (tailAppended === false) {\r\n        Object.assign(this, consistentValue);\r\n        break;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n      Object.assign(this, consistentAppended);\r\n      appendCount += appended;\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n    this._appendTail(tail);\r\n\r\n    return appendCount;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.value;\r\n  }\r\n\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n  }\r\n\r\n  splice (start, deleteCount, inserted, removeDirection) {\r\n    const tailPos = start + deleteCount;\r\n    const tail = this._extractTail(tailPos);\r\n\r\n    start = this.nearestInputPos(start, removeDirection);\r\n    this.clear(start);\r\n    return this.appendWithTail(inserted, tail);\r\n  }\r\n\r\n  withValueRefresh (fn) {\r\n    if (this._refreshing) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.isInitialized ? this.unmaskedValue : null;\r\n\r\n    const ret = fn();\r\n\r\n    if (unmasked != null) this.unmaskedValue = unmasked;\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n}\r\n","import createMask from '../factory';\r\n\r\n\r\nexport default\r\nclass PatternDefinition {\r\n  constructor(opts) {\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  reset () {\r\n    this.isHollow = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  get isInput () {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  get isHiddenHollow () {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  resolve (ch) {\r\n    if (!this._masked) return false;\r\n    // TODO seems strange\r\n    this._masked.value = ch;\r\n    return this._masked.value;\r\n  }\r\n}\r\n\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","import {conform, DIRECTION, indexInDirection, refreshValueOnSet} from '../core/utils';\r\nimport Masked from './base';\r\nimport PatternDefinition from './pattern/definition';\r\n\r\n\r\nexport default\r\nclass PatternMasked extends Masked {\r\n  constructor (opts) {\r\n    const {definitions, placeholder} = opts;\r\n    super(opts);\r\n    delete this.isInitialized;\r\n\r\n    this.placeholder = placeholder;\r\n    this.definitions = definitions;\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  get placeholder () {\r\n    return this._placeholder;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...PatternMasked.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n  }\r\n\r\n  get definitions () {\r\n    return this._definitions;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set definitions (defs) {\r\n    defs = {\r\n      ...PatternDefinition.DEFAULTS,\r\n      ...defs\r\n    };\r\n\r\n    this._definitions = defs;\r\n    this._updateMask();\r\n  }\r\n\r\n  get mask () {\r\n    return this._mask;\r\n  }\r\n\r\n  @refreshValueOnSet\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n    this._updateMask();\r\n  }\r\n\r\n  _updateMask () {\r\n    const defs = this._definitions;\r\n    this._charDefs = [];\r\n\r\n    const pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      let char = pattern[i];\r\n      let type = !unmaskingBlock && char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === PatternMasked.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === PatternMasked.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        // TODO validation\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        mask: unmasking &&\r\n          (type === PatternDefinition.TYPES.INPUT ?\r\n            defs[char] :\r\n            (m => m.value === char))\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  clone () {\r\n    const m = new PatternMasked(this);\r\n    m._value = this.value.slice();\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.some(d =>\r\n      d.isInput && !d.optional && d.isHollow);\r\n  }\r\n\r\n  hiddenHollowsBefore (defIndex) {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  mapDefIndexToPos (defIndex) {\r\n    if (defIndex == null) return;\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  mapPosToDefIndex (pos) {\r\n    if (pos == null) return;\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _unmask () {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.mask && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return (!tail || this.appendChunks(tail)) && this._appendPlaceholder();\r\n  }\r\n\r\n  append (str, soft) {\r\n    const oldValueLength = this.value.length;\r\n\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (!def) return false;\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          const m = this.clone();\r\n          this._value += chres;\r\n          if (!this._validate()) {\r\n            chres = '';\r\n            Object.assign(this, m);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        // if ok - next di\r\n        if (!chres) {\r\n          if (!def.optional && !soft) {\r\n            this._value += this.placeholder.char;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.mask || soft);\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n  }\r\n\r\n  appendChunks (chunks, soft) {\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const [fromDefIndex, input] = chunks[ci];\r\n      if (fromDefIndex != null) this._appendPlaceholder(fromDefIndex);\r\n      if (this.append(input, soft) === false) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _extractTail (fromPos, toPos) {\r\n    return this.extractInputChunks(fromPos, toPos);\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (let ci=fromPos, di=this.mapPosToDefIndex(fromPos); ci<toPos && di < toDefIndex; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  extractInputChunks (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => [\r\n      stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    ]).filter(([stop, input]) => stop != null || input);\r\n  }\r\n\r\n  _appendPlaceholder (toDefIndex) {\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (this.placeholder.show === 'always' || toDefIndex) {\r\n        this._value += !def.isInput ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n  }\r\n\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(to);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n  }\r\n\r\n   nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // search forward\r\n    for (nextdi = indexInDirection(di, direction); 0 <= nextdi && nextdi < this._charDefs.length; di += direction, nextdi += direction) {\r\n      const nextDef = this._charDefs[nextdi];\r\n      if (firstInputIndex == null && nextDef.isInput) firstInputIndex = di;\r\n      if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n      if (nextDef.isInput && !nextDef.isHollow) {\r\n        firstFilledInputIndex = di;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (direction === DIRECTION.LEFT || firstInputIndex == null) {\r\n      // search backwards\r\n      direction = -direction;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (nextdi = indexInDirection(di, direction);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += direction, nextdi += direction)\r\n      {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n}\r\n\r\nPatternMasked.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\nPatternMasked.STOP_CHAR = '`';\r\nPatternMasked.ESCAPE_CHAR = '\\\\';\r\nPatternMasked.Definition = PatternDefinition;\r\n","import {DIRECTION} from './utils';\r\n\r\n\r\nexport default\r\nclass ActionDetails {\r\n  constructor (value, cursorPos, oldValue, oldSelection) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n  }\r\n\r\n  get startChangePos () {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  get insertedCount () {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  get inserted () {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  get removedCount () {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  get removed () {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  get head () {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  get tail () {\r\n    this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  get removeDirection () {\r\n    return this.removedCount &&\r\n      ((this.oldSelection.end === this.cursorPos || this.insertedCount) ?\r\n        DIRECTION.RIGHT :\r\n        DIRECTION.LEFT);\r\n  }\r\n}\r\n","import ActionDetails from '../core/action-details';\r\nimport createMask from '../masked/factory';\r\n\r\n\r\nexport default\r\nclass InputMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this.saveSelection = this.saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n    this._alignCursorFriendly = this._alignCursorFriendly.bind(this);\r\n  }\r\n\r\n  update (opts) {\r\n    const unmasked = this.masked ? this.masked.unmaskedValue : null;\r\n\r\n    const mask = opts.mask;\r\n    if (mask) this.mask = mask;\r\n\r\n    for (const k in opts) {\r\n      if (k === 'mask') continue;\r\n      this.masked[k] = opts[k];\r\n    }\r\n\r\n    if (unmasked != null) this.masked.unmaskedValue = unmasked;\r\n    this.updateControl();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  get mask () { return this.masked.mask; }\r\n  set mask (mask) {\r\n    if (typeof mask === typeof this.masked.mask) this.masked.mask = mask;\r\n    this.masked = createMask(this.masked);\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this._alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this._alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this._alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this.saveSelection();\r\n  }\r\n\r\n  saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this._alignCursor();\r\n  }\r\n\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent('accept');\r\n    if (this.masked.isComplete) this.fireEvent('complete');\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  _alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos);\r\n  }\r\n\r\n  _alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this._alignCursor();\r\n  }\r\n\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const insertedCount = this.masked.splice(\r\n      details.startChangePos,\r\n      details.removed.length,\r\n      details.inserted,\r\n      details.removeDirection);\r\n\r\n    const cursorPos = this.masked.nearestInputPos(\r\n      details.startChangePos + insertedCount,\r\n      // if none was removed - align to right\r\n      details.removeDirection);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  _onChange () {\r\n    if (this.value !== this.el.value) this.value = this.el.value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n"],"names":["isString","str","String","conform","res","fallback","indexInDirection","pos","direction","DIRECTION","LEFT","refreshValueOnSet","target","key","descriptor","method","set","args","this","withValueRefresh","bind","createMask","opts","mask","Masked","RegExp","masked","test","value","PatternMasked","prototype","Function","IMask","el","InputMask","bindEvents","validate","_value","isInitialized","_validate","clone","m","slice","reset","nearestInputPos","cursorPos","extractInput","fromPos","toPos","length","_extractTail","_appendTail","tail","append","soft","oldValueLength","consistentValue","ci","appendWithTail","appendCount","consistentAppended","ch","appended","_unmask","clear","from","to","splice","start","deleteCount","inserted","removeDirection","tailPos","fn","_refreshing","unmasked","unmaskedValue","ret","_mask","PatternDefinition","_masked","isHollow","resolve","type","TYPES","INPUT","optional","DEFAULTS","definitions","placeholder","_Masked","_this","_updateMask","defs","_definitions","_charDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","i","char","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","push","forEach","d","babelHelpers.extends","_this3","hiddenHollowsBefore","defIndex","filter","isHiddenHollow","mapDefIndexToPos","mapPosToDefIndex","di","def","appendChunks","_appendPlaceholder","resolved","skipped","chres","chunks","fromDefIndex","input","extractInputChunks","toDefIndex","isInput","stopDefIndices","map","stops","s","indexOf","_this4","stop","maxDefIndex","show","initialDefIndex","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","overflow","_placeholder","ph","DEFAULT_PLACEHOLDER","some","Definition","ActionDetails","oldValue","oldSelection","Math","min","startChangePos","substr","insertedCount","max","end","removedCount","substring","RIGHT","_listeners","_unmaskedValue","saveSelection","_onInput","_onChange","_onDrop","_alignCursor","_alignCursorFriendly","update","k","updateControl","on","ev","handler","off","hIndex","addEventListener","unbindEvents","removeEventListener","fireEvent","l","warn","_selection","selectionStart","destroy","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","isComplete","updateCursor","_delayUpdateCursor","_abortUpdateCursor","_changingCursorPos","_cursorChanging","setTimeout","details","removed","preventDefault","stopPropagation","selectionEnd","document","activeElement","setSelectionRange","window"],"mappings":"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"}