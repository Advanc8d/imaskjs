{"version":3,"file":"imask.js","sources":["utils.js","resolvers/mask-resolver.js","resolvers/func-resolver.js","resolvers/regexp-resolver.js","resolvers/pattern-resolver.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","export default\r\nclass MaskResolver {\r\n  constructor (mask) { this.mask = mask; }\r\n\r\n  resolve (str) { return str; }\r\n  resolveUnmasked (str) { return str; }\r\n\r\n  extractUnmasked (str) { return str; }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\n\r\nexport default\r\nclass FuncResolver extends MaskResolver {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\n\r\nexport default\r\nclass RegExpResolver extends MaskResolver {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import MaskResolver from './mask-resolver';\r\nimport {conform} from '../utils';\r\n\r\n\r\nexport default\r\nclass PatternResolver extends MaskResolver {\r\n  constructor (pattern, opts) {\r\n    super(pattern);\r\n    this._charPlaceholder = opts.charPlaceholder || PatternResolver.DEFAULT_CHAR_PLACEHOLDER;\r\n    this._definitions = PatternResolver.DEFINITIONS;\r\n    this._charDefs = [];\r\n    this._hollows = [];\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in this._definitions ?\r\n        PatternResolver.DEF_TYPES.INPUT :\r\n        PatternResolver.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternResolver.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternResolver.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternResolver.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._resolvers = {};\r\n    for (var defKey in this._definitions) {\r\n      this._resolvers[defKey] = IMask.ResolverFactory(this._definitions[defKey]);\r\n    }\r\n  }\r\n\r\n  _tryAppendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    for (var ci=0, defIndex=str.length; ci<tail.length; ++defIndex) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[defIndex];\r\n\r\n      if (!def) return;\r\n\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, defIndex, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          chres = this.charPlaceholder;\r\n          hollows.push(defIndex);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows];\r\n  }\r\n\r\n  _extractInput (str, startDefIndex=0) {\r\n    var input = '';\r\n    for (var di=startDefIndex, ci=0; ci<str.length && di<this._charDefs.length; ++ci, ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT &&\r\n        this._hollows.indexOf(di) < 0) input += ch;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [res];\r\n    for (var ci=0, di=head.length; ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      var chres = '';\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        chres = resolver.resolve(ch, ci) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          ++di;\r\n          res += placeholderBuffer; placeholderBuffer = '';\r\n          chres = conform(chres, ch);\r\n        }\r\n        ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n\r\n      res += chres;\r\n      insertSteps[ci] = res;\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    // TODO\r\n    if (!details) return '';\r\n    // console.log(details);\r\n\r\n\r\n    var cursorPos = details.cursorPos;\r\n    var oldSelection = details.oldSelection;\r\n    var oldValue = details.oldValue;\r\n    var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n    // Math.max for opposite operation\r\n    var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n      // for Delete\r\n      oldValue.length - str.length, 0);\r\n    var insertedCount = cursorPos - startChangePos;\r\n\r\n\r\n    var head = str.substring(0, startChangePos);\r\n    var tail = str.substring(startChangePos + insertedCount);\r\n    var inserted = str.substr(startChangePos, insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    this._hollows = this._hollows.filter(h => h < startChangePos);\r\n\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n\r\n    var res = head;\r\n    for (var step of insertSteps.reverse()) {\r\n      var result = this._tryAppendTail(step, tailInput);\r\n      if (result) {\r\n        [res, this._hollows] = result;\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var def;\r\n    // append fixed at end\r\n    if (oldSelection.end <= cursorPos) { // if not backspace\r\n      for (;; ++cursorPos) {\r\n        def = this._charDefs[cursorPos];\r\n        if (!def || def.type === PatternResolver.DEF_TYPES.INPUT) break;\r\n        if (cursorPos >= res.length) res += def.char;\r\n      }\r\n    }\r\n\r\n    // remove head fixed and hollows\r\n    if (!inserted && cursorPos === res.length) { // if removed at end\r\n      var di = cursorPos - 1;\r\n      var hasHollows = false;\r\n      for (; di > 0; --di) {\r\n        def = this._charDefs[di];\r\n        if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n          if (this._hollows.includes(di)) hasHollows = true;\r\n          else break;\r\n        }\r\n      }\r\n      if (hasHollows) res = res.slice(0, di);\r\n    }\r\n\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  resolveUnmasked (str) {\r\n    var res = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length;) {\r\n      var def = this._charDefs[di];\r\n      var ch = str[ci];\r\n\r\n      var chres = '';\r\n      if (def.type === PatternResolver.DEF_TYPES.INPUT) {\r\n        if (!this._hollows.includes(di) && this._resolvers[def.char].resolve(ch, ci)) {\r\n          chres = ch;\r\n          ++di;\r\n        }\r\n        ++ci;\r\n      } else {\r\n        chres = def.char;\r\n        if (def.unmasking && def.char === ch) ++ci;\r\n        ++di;\r\n      }\r\n      res += chres;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  extractUnmasked (str) {\r\n    var unmasked = '';\r\n    for (var ci=0; ci<str.length && ci<this._charDefs.length; ++ci) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[ci];\r\n\r\n      if (def.unmasking && !this._hollows.includes(ci) &&\r\n        (def.type === PatternResolver.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  get charPlaceholder () {\r\n    return this._charPlaceholder;\r\n  }\r\n\r\n  set charPlaceholder (ph) {\r\n    // TODO\r\n  }\r\n}\r\nPatternResolver.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternResolver.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternResolver.DEFAULT_CHAR_PLACEHOLDER = '_';\r\n","import {conform, isString} from './utils';\r\n\r\nimport MaskResolver from './resolvers/mask-resolver';\r\nimport FuncResolver from './resolvers/func-resolver';\r\nimport RegExpResolver from './resolvers/regexp-resolver';\r\nimport PatternResolver from './resolvers/pattern-resolver';\r\n\r\n// TODO\r\n// - empty placeholder\r\n// - !progressive\r\n// - validateOnly\r\n// - add comments\r\n\r\n\r\nexport default\r\nclass IMask {\r\n  constructor (el, opts={}) {\r\n    this.el = el;\r\n    this.resolver = IMask.ResolverFactory(opts.mask, opts);\r\n    this.charResolver = IMask.ResolverFactory(opts.charMask, opts);\r\n\r\n    this._listeners = {};\r\n\r\n    el.addEventListener('keydown', this._saveCursor.bind(this));\r\n    el.addEventListener('input', this._processInput.bind(this));\r\n    el.addEventListener('drop', this._onDrop.bind(this));\r\n    this._saveCursor();\r\n    this._processInput();\r\n\r\n    // refresh\r\n    this.rawValue = this.el.value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  _saveCursor (ev) {\r\n    this._oldValue = this.el.value;\r\n    this._oldSelection = {\r\n      start: this.el.selectionStart,\r\n      end: this.el.selectionEnd\r\n    }\r\n  }\r\n\r\n  _processInput (ev) {\r\n    this._conform();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n  }\r\n\r\n  _conform () {\r\n    var inputValue = this.el.value;\r\n    // use selectionEnd for handle Undo\r\n    var cursorPos = this.el.selectionEnd;\r\n\r\n    let res = inputValue\r\n      .split('')\r\n      .map((ch, ...args) => {\r\n        var res = this.charResolver.resolve(ch, ...args);\r\n        return conform(res, ch);\r\n      })\r\n      .join('');\r\n\r\n    // var maxCursorPos = Math.max(cursorPos, this._oldSelection.end);\r\n    var details = {\r\n      oldSelection: this._oldSelection,\r\n      cursorPos: cursorPos,\r\n      oldValue: this._oldValue\r\n    };\r\n\r\n    res = conform(this.resolver.resolve(res, details),\r\n      res,\r\n      this._oldValue);\r\n    if (res !== inputValue) {\r\n      // var cursorPos = this.el.selectionStart;\r\n      // var afterCursorCount = inputValue.length - cursorPos;\r\n      // var cursorPos = res.length - afterCursorCount;\r\n      this.el.value = res;\r\n      this.el.selectionStart = this.el.selectionEnd = details.cursorPos;\r\n    }\r\n\r\n    if (res !== this._oldValue) {\r\n      var listeners = this._listeners.accept || [];\r\n      listeners.forEach(l => l());\r\n    }\r\n  }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    var details = {\r\n      startChangePos: 0,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: this.el.value.length\r\n      },\r\n      removedCount: this.el.value.length,\r\n      insertedCount: str.length,\r\n      oldValue: this.el.value\r\n    };\r\n    this.el.value = conform(this.resolver.resolve(str, details), this.el.value);\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.resolver.extractUnmasked(this.el.value);\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.el.value = this.resolver.resolveUnmasked(value);\r\n  }\r\n\r\n  static ResolverFactory (mask, opts) {\r\n    if (mask instanceof MaskResolver) return mask;\r\n    if (mask instanceof RegExp) return new RegExpResolver(mask, opts);\r\n    if (mask instanceof Function) return new FuncResolver(mask, opts);\r\n    if (isString(mask)) return new PatternResolver(mask, opts);\r\n    return new MaskResolver(mask, opts);\r\n  }\r\n}\r\nIMask.MaskResolver = MaskResolver;\r\nIMask.FuncResolver = FuncResolver;\r\nIMask.RegExpResolver = RegExpResolver;\r\nIMask.PatternResolver = PatternResolver;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","MaskResolver","mask","FuncResolver","RegExpResolver","test","PatternResolver","pattern","opts","_charPlaceholder","charPlaceholder","DEFAULT_CHAR_PLACEHOLDER","_definitions","DEFINITIONS","_charDefs","_hollows","unmaskingBlock","optionalBlock","i","length","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","push","_resolvers","defKey","IMask","ResolverFactory","tail","placeholderBuffer","hollows","slice","ci","defIndex","def","resolver","char","chres","resolve","startDefIndex","input","di","indexOf","head","inserted","insertSteps","details","cursorPos","oldSelection","oldValue","startChangePos","Math","min","start","removedCount","max","end","insertedCount","substring","substr","tailInput","_extractInput","filter","h","_generateInsertSteps","reverse","step","result","_tryAppendTail","hasHollows","includes","unmasked","ph","el","charResolver","charMask","_listeners","addEventListener","_saveCursor","bind","_processInput","_onDrop","rawValue","value","ev","preventDefault","stopPropagation","_oldValue","_oldSelection","selectionStart","selectionEnd","_conform","handler","hIndex","splice","inputValue","split","map","args","join","listeners","accept","forEach","l","extractUnmasked","resolveUnmasked","RegExp","Function","window"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}