{"version":3,"file":"imask.js","sources":["utils.js","masks/base.js","masks/regexp.js","masks/func.js","masks/pattern.js","masks/pipe.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nvar DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n\r\n\r\nexport\r\nfunction extendDetailsAdjustments(str, details) {\r\n  var cursorPos = details.cursorPos;\r\n  var oldSelection = details.oldSelection;\r\n  var oldValue = details.oldValue;\r\n\r\n  var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n  var insertedCount = cursorPos - startChangePos;\r\n  // Math.max for opposite operation\r\n  var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n    // for Delete\r\n    oldValue.length - str.length, 0);\r\n\r\n  return {\r\n    ...details,\r\n    startChangePos,\r\n    head: str.substring(0, startChangePos),\r\n    tail: str.substring(startChangePos + insertedCount),\r\n    inserted: str.substr(startChangePos, insertedCount),\r\n    removed: oldValue.substr(startChangePos, removedCount),\r\n    removeDirection: removedCount &&\r\n      ((oldSelection.end === cursorPos || insertedCount) ?\r\n        DIRECTION.RIGHT :\r\n        DIRECTION.LEFT)\r\n  };\r\n}\r\n\r\n\r\nexport\r\nfunction indexInDirection (pos, direction) {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n","import {conform, extendDetailsAdjustments} from '../utils';\r\n\r\n\r\nexport default\r\nclass BaseMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.mask = opts.mask;\r\n\r\n    this._listeners = {};\r\n    this._refreshingCount = 0;\r\n    this._rawValue = \"\";\r\n    this._unmaskedValue = \"\";\r\n\r\n    this.saveSelection = this.saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  get rawValue () {\r\n    return this._rawValue;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    this.processInput(str, {\r\n      cursorPos: str.length,\r\n      oldValue: this.rawValue,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: this.rawValue.length\r\n      }\r\n    });\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.rawValue = value;\r\n  }\r\n\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    var listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  processInput (inputValue, details) {\r\n    details = {\r\n      cursorPos: this.cursorPos,\r\n      oldSelection: this._selection,\r\n      oldValue: this.rawValue,\r\n      oldUnmaskedValue: this.unmaskedValue,\r\n      ...details\r\n    };\r\n\r\n    details = extendDetailsAdjustments(inputValue, details);\r\n\r\n    var res = conform(this.resolve(inputValue, details),\r\n      inputValue,\r\n      this.rawValue);\r\n\r\n    this.updateElement(res, details.cursorPos);\r\n    return res;\r\n  }\r\n\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this.saveSelection();\r\n  }\r\n\r\n  saveSelection (ev) {\r\n    if (this.rawValue !== this.el.value) {\r\n      console.warn(\"Uncontrolled input change, refresh mask manually!\");\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  updateElement (value, cursorPos) {\r\n    var unmaskedValue = this._calcUnmasked(value);\r\n    var isChanged = (this.unmaskedValue !== unmaskedValue ||\r\n      this.rawValue !== value);\r\n\r\n    this._unmaskedValue = unmaskedValue;\r\n    this._rawValue = value;\r\n\r\n    if (this.el.value !== value) this.el.value = value;\r\n    this.updateCursor(cursorPos);\r\n\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent(\"accept\");\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this._abortUpdateCursor();\r\n      this.cursorPos = this._changingCursorPos;\r\n    }, 10);\r\n  }\r\n\r\n  _abortUpdateCursor() {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  _onInput (ev) {\r\n    this._abortUpdateCursor();\r\n    this.processInput(this.el.value);\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  // override\r\n  resolve (str, details) { return str; }\r\n\r\n  _calcUnmasked (value) { return value; }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass RegExpMask extends BaseMask {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass FuncMask extends BaseMask {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import {conform, extendDetailsAdjustments, indexInDirection, DIRECTION} from '../utils';\r\nimport BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass PatternMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n\r\n    this._hollows = [];\r\n    this.placeholder = opts.placeholder;\r\n    this.definitions = {\r\n      ...PatternMask.DEFINITIONS,\r\n      ...opts.definitions\r\n    };\r\n\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n    this._alignCursorFriendly = this._alignCursorFriendly.bind(this);\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  _alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this._alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    this.el.addEventListener('click', this._alignCursorFriendly);\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    this.el.removeEventListener('click', this._alignCursorFriendly);\r\n  }\r\n\r\n  _installDefinitions (definitions) {\r\n    this._definitions = definitions;\r\n    this._charDefs = [];\r\n    this._alignStops = [];\r\n\r\n    var pattern = this.mask;\r\n    if (!pattern || !definitions) return;\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in definitions ?\r\n        PatternMask.DEF_TYPES.INPUT :\r\n        PatternMask.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternMask.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternMask.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === PatternMask.STOP_CHAR) {\r\n        this._alignStops.push(this._charDefs.length);\r\n        continue;\r\n      }\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === PatternMask.ESCAPE_CHAR) {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternMask.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._buildResolvers();\r\n  }\r\n\r\n  _buildResolvers () {\r\n    this._resolvers = {};\r\n    for (var defKey in this.definitions) {\r\n      this._resolvers[defKey] = IMask.MaskFactory(this.el, {\r\n        mask: this.definitions[defKey]\r\n      });\r\n    }\r\n  }\r\n\r\n  _appendTail (str, tail, skipUnresolvedInput=true) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    var overflow = false;\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(str.length); ci < tail.length;) {\r\n      if (this._isHollow(di)) {\r\n        // TODO check other cases\r\n        ++di;\r\n        continue;\r\n      }\r\n\r\n      var ch = tail[ci];\r\n      var def = this.def(di, str + placeholderBuffer);\r\n\r\n      // failed\r\n      if (!def) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, di, str + placeholderBuffer) || '';\r\n        var isResolved = !!chres;\r\n\r\n        // if ok - next di\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n        } else {\r\n          if (!def.optional && skipUnresolvedInput) chres = this._placeholder.char;\r\n          // TODO seems check is useless\r\n          if (hollows.indexOf(di) < 0) hollows.push(di);\r\n        }\r\n\r\n        if (chres) {\r\n          str += placeholderBuffer + conform(chres, ch);\r\n          placeholderBuffer = '';\r\n        }\r\n        if (chres || def.optional || !skipUnresolvedInput) ++di;\r\n        if (isResolved || !def.optional && !skipUnresolvedInput) ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char && (def.unmasking || !skipUnresolvedInput)) ++ci;\r\n        ++di;\r\n      }\r\n    }\r\n\r\n    return [str, hollows, overflow];\r\n  }\r\n\r\n  _appendTailChunks (str, chunks, skipUnresolvedInput) {\r\n    var overflow = false;\r\n    for (var ci=0; ci < chunks.length; ++ci) {\r\n      var [, input] = chunks[ci];\r\n      [str, this._hollows, overflow] = this._appendTail(str, input, skipUnresolvedInput);\r\n      if (overflow) break;\r\n\r\n      // not last - append placeholder between stops\r\n      var chunk2 = chunks[ci+1]\r\n      var stop2 = chunk2 && chunk2[0];\r\n      if (stop2) str = this._appendPlaceholderEnd(str, stop2);\r\n    }\r\n    return [str, this._hollows, overflow];\r\n  }\r\n\r\n  _extractInput (str, fromPos=0, toPos) {\r\n    var input = '';\r\n\r\n    var toDefIndex = toPos && this._mapPosToDefIndex(toPos);\r\n    for (var ci=0, di=this._mapPosToDefIndex(fromPos); ci<str.length && (!toDefIndex || di < toDefIndex); ++di) {\r\n      var ch = str[ci];\r\n      var def = this.def(di, str);\r\n\r\n      if (!def) break;\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (this._isInput(di) && !this._isHollow(di)) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _extractInputChunks (str, stops) {\r\n    var chunks = [];\r\n    for (var si=0; si<stops.length && str; ++si) {\r\n      var s = stops[si];\r\n      var s2 = stops[si+1];\r\n      chunks.push([s, this._extractInput(str, s, s2)]);\r\n      if (s2) str = str.slice(s2 - s);\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  _isHollow (defIndex) {\r\n    return this._hollows.indexOf(defIndex) >= 0;\r\n  }\r\n\r\n  _isHiddenHollow (defIndex) {\r\n    return this._isHollow(defIndex) && this.def(defIndex) && this.def(defIndex).optional;\r\n  }\r\n\r\n  _isInput (defIndex) {\r\n    return this.def(defIndex) && this.def(defIndex).type === PatternMask.DEF_TYPES.INPUT;\r\n  }\r\n\r\n  _hollowsBefore (defIndex) {\r\n    return this._hollows.filter(h => h < defIndex && this._isHiddenHollow(h));\r\n  }\r\n\r\n  _mapDefIndexToPos (defIndex) {\r\n    return defIndex - this._hollowsBefore(defIndex).length;\r\n  }\r\n\r\n  _mapPosToDefIndex (pos) {\r\n    var defIndex = pos;\r\n    for (var hi=0; hi<this._hollows.length; ++hi) {\r\n      var h = this._hollows[hi];\r\n      if (h >= defIndex) break;\r\n      if (this._isHiddenHollow(h)) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var overflow = false;\r\n\r\n    // save hollow during generation\r\n    var hollows = this._hollows;\r\n\r\n    var insertSteps = [[head, hollows.slice()]];\r\n\r\n    for (var ci=0; ci<inserted.length && !overflow; ++ci) {\r\n      var ch = inserted[ci];\r\n      var [res, hollows, overflow] = this._appendTail(head, ch, false);\r\n      this._hollows = hollows;\r\n      if (!overflow && res !== head) {\r\n        insertSteps.push([res, hollows]);\r\n        head = res;\r\n      }\r\n    }\r\n\r\n    // pop hollows back\r\n    this._hollows = hollows;\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var cursorPos = details.cursorPos;\r\n    var startChangePos = details.startChangePos;\r\n    var inserted = details.inserted;\r\n    var removedCount = details.removed.length;\r\n    var tailPos = startChangePos + removedCount;\r\n    var tailDefIndex = this._mapPosToDefIndex(tailPos);\r\n    var tailAlignStopsPos = [\r\n      tailPos,\r\n      ...this._alignStops\r\n        .filter(s => s >= tailDefIndex)\r\n        .map(s => this._mapDefIndexToPos(s))\r\n    ];\r\n    var tailInputChunks = this._extractInputChunks(details.tail, tailAlignStopsPos);\r\n\r\n    // remove hollows after cursor\r\n    var lastHollowIndex = this._mapPosToDefIndex(startChangePos);\r\n    this._hollows = this._hollows.filter(h => h < lastHollowIndex);\r\n\r\n    var res = details.head;\r\n    // if remove at left - adjust start change pos\r\n    if (details.removeDirection === DIRECTION.LEFT) res = res.slice(0, this._nearestInputPos(startChangePos));\r\n\r\n    // insert available\r\n    var insertSteps = this._generateInsertSteps(res, inserted);\r\n    for (var istep=insertSteps.length-1; istep >= 0; --istep) {\r\n      var step, tres, overflow;\r\n      [step, this._hollows] = insertSteps[istep];\r\n      [tres, this._hollows, overflow] = this._appendTailChunks(step, tailInputChunks);\r\n      if (!overflow) {\r\n        res = tres;\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    res = this._appendPlaceholderEnd(res);\r\n    details.cursorPos = this._nearestInputPos(cursorPos, details.removeDirection);\r\n\r\n    return res;\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    // fire 'complete' after 'accept' event\r\n    super._fireChangeEvents();\r\n    if (this.isComplete) this.fireEvent(\"complete\");\r\n  }\r\n\r\n  get isComplete () {\r\n    for (var di=0; ;++di) {\r\n      var def = this.def(di);\r\n      if (!def) break;\r\n      if (this._isInput(di) && !def.optional && this._isHollow(di)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _appendFixedEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length); ; ++di) {\r\n      var def = this.def(di, res);\r\n      if (!def) break;\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n      if (this._isInput(di)) break;\r\n      if (di >= res.length) res += def.char;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _appendPlaceholderEnd (res, toPos) {\r\n    var toDefIndex = toPos && this._mapPosToDefIndex(toPos);\r\n    for (var di=this._mapPosToDefIndex(res.length); !toDefIndex || di < toDefIndex; ++di) {\r\n      var def = this.def(di, res);\r\n      if (!def) break;\r\n\r\n      if (this._isInput(di) && !this._isHollow(di)) {\r\n        this._hollows.push(di);\r\n      }\r\n      if (this._placeholder.show === 'always' || toPos) {\r\n        res += def.type === PatternMask.DEF_TYPES.FIXED ?\r\n          def.char :\r\n          !def.optional ?\r\n            this._placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _calcUnmasked (str) {\r\n    var unmasked = '';\r\n    for (var ci=0, di=0; ci<str.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this.def(di, str);\r\n\r\n      if (!def) break;\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.unmasking && !this._isHollow(di) &&\r\n        (this._isInput(di) && this._resolvers[def.char].resolve(ch, ci, str) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n      ++ci;\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this._hollows.length = 0;\r\n    var res;\r\n    [res, this._hollows] = this._appendTail('', str);\r\n    this.updateElement(this._appendPlaceholderEnd(res));\r\n\r\n    this._alignCursor();\r\n  }\r\n\r\n  get placeholder () { return this._placeholder; }\r\n\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...PatternMask.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get placeholderLabel () {\r\n    return this.defs().map(def =>\r\n      def.type === PatternMask.DEF_TYPES.FIXED ?\r\n        def.char :\r\n        !def.optional ?\r\n          this._placeholder.char :\r\n          '').join('');\r\n  }\r\n\r\n  get definitions () { return this._definitions; }\r\n\r\n  set definitions (defs) {\r\n    this._installDefinitions(defs);\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get mask () { return this._mask; }\r\n\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n    if (this._initialized) this.definitions = this.definitions;\r\n  }\r\n\r\n  defs (str) {\r\n    var defs = [];\r\n    for (var i=0; ;++i) {\r\n      var def = this.def(i, str);\r\n      if (!def) break;\r\n      defs.push(def);\r\n    }\r\n    return defs;\r\n  }\r\n\r\n  def (index, str) {\r\n    return this._charDefs[index];\r\n  }\r\n\r\n  _nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    var initialDefIndex = this._mapPosToDefIndex(cursorPos);\r\n    var di = initialDefIndex;\r\n\r\n    var firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // search forward\r\n    for (nextdi = indexInDirection(di, direction); this.def(nextdi); di += direction, nextdi += direction) {\r\n      if (firstInputIndex == null && this._isInput(nextdi)) firstInputIndex = di;\r\n      if (firstVisibleHollowIndex == null && this._isHollow(nextdi) && !this._isHiddenHollow(nextdi)) firstVisibleHollowIndex = di;\r\n      if (this._isInput(nextdi) && !this._isHollow(nextdi)) {\r\n        firstFilledInputIndex = di;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (direction === DIRECTION.LEFT || firstInputIndex == null) {\r\n      // search backwards\r\n      direction = -direction;\r\n      var overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (nextdi = indexInDirection(di, direction); this.def(nextdi); di += direction, nextdi += direction) {\r\n        if (this._isInput(nextdi)) {\r\n          firstInputIndex = di;\r\n          if (this._isHollow(nextdi) && !this._isHiddenHollow(nextdi)) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || !this.def(nextdi);\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this._mapDefIndexToPos(di);\r\n  }\r\n\r\n  _alignCursor () {\r\n    this.cursorPos = this._nearestInputPos(this.cursorPos);\r\n  }\r\n}\r\nPatternMask.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternMask.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternMask.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\nPatternMask.STOP_CHAR = '\\'';\r\nPatternMask.ESCAPE_CHAR = '\\\\';\r\n","import BaseMask from './base';\r\nimport {extendDetailsAdjustments} from '../utils';\r\n\r\n\r\nexport default\r\nclass PipeMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n\r\n    this.multipass = opts.multipass;\r\n\r\n    this._compiledMasks = this.mask.map(m => IMask.MaskFactory(el, m));\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var res = this._pipe(str, details);\r\n    if (!this.multipass) return res;\r\n\r\n    var cursorPos = details.cursorPos;\r\n\r\n    var stepRes;\r\n    var tempRes = res;\r\n\r\n    while (stepRes !== tempRes) {\r\n      stepRes = tempRes;\r\n      tempRes = this._pipe(stepRes, {\r\n        cursorPos: stepRes.length,\r\n        oldValue: stepRes,\r\n        oldSelection: {\r\n          start: 0,\r\n          end: stepRes.length\r\n        }\r\n      });\r\n    }\r\n\r\n    details.cursorPos = cursorPos - (res.length - stepRes.length);\r\n\r\n    return stepRes;\r\n  }\r\n\r\n  _pipe (str, details) {\r\n    return this._compiledMasks.reduce((s, m) => {\r\n      var d = extendDetailsAdjustments(s, details);\r\n      var res = m.resolve(s, d);\r\n      details.cursorPos = d.cursorPos;\r\n      return res;\r\n    }, str);\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    this._compiledMasks.forEach(m => {\r\n      m.bindEvents();\r\n      // disable basemask events for child masks\r\n      BaseMask.prototype.unbindEvents.apply(m);\r\n    });\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    this._compiledMasks.forEach(m => m.unbindEvents());\r\n  }\r\n}\r\n","import {isString} from './utils';\r\n\r\nimport BaseMask from './masks/base';\r\nimport RegExpMask from './masks/regexp';\r\nimport FuncMask from './masks/func';\r\nimport PatternMask from './masks/pattern';\r\nimport PipeMask from './masks/pipe';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  var mask = IMask.MaskFactory(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.rawValue = el.value;\r\n  return mask;\r\n}\r\n\r\nIMask.MaskFactory = function (el, opts) {\r\n  var mask = opts.mask;\r\n  if (mask instanceof BaseMask) return mask;\r\n  if (mask instanceof RegExp) return new RegExpMask(el, opts);\r\n  if (mask instanceof Array) return new PipeMask(el, opts);\r\n  if (isString(mask)) return new PatternMask(el, opts);\r\n  if (mask.prototype instanceof BaseMask) return new mask(el, opts);\r\n  if (mask instanceof Function) return new FuncMask(el, opts);\r\n  return new BaseMask(el, opts);\r\n}\r\nIMask.BaseMask = BaseMask;\r\nIMask.FuncMask = FuncMask;\r\nIMask.RegExpMask = RegExpMask;\r\nIMask.PatternMask = PatternMask;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","DIRECTION","extendDetailsAdjustments","details","cursorPos","oldSelection","oldValue","startChangePos","Math","min","start","insertedCount","removedCount","max","end","length","substring","substr","RIGHT","LEFT","indexInDirection","pos","direction","BaseMask","el","opts","mask","_listeners","_refreshingCount","_rawValue","_unmaskedValue","saveSelection","bind","_onInput","_onDrop","ev","handler","push","hIndex","indexOf","splice","addEventListener","removeEventListener","listeners","forEach","l","inputValue","_selection","rawValue","unmaskedValue","resolve","updateElement","value","warn","selectionStart","unbindEvents","_calcUnmasked","isChanged","updateCursor","_fireChangeEvents","fireEvent","_delayUpdateCursor","_abortUpdateCursor","_changingCursorPos","_cursorChanging","setTimeout","processInput","preventDefault","stopPropagation","selectionEnd","document","activeElement","setSelectionRange","RegExpMask","test","FuncMask","PatternMask","_hollows","placeholder","definitions","DEFINITIONS","_alignCursor","_alignCursorFriendly","_initialized","_definitions","_charDefs","_alignStops","pattern","unmaskingBlock","optionalBlock","i","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","STOP_CHAR","ESCAPE_CHAR","_buildResolvers","_resolvers","defKey","IMask","MaskFactory","tail","skipUnresolvedInput","placeholderBuffer","hollows","slice","overflow","ci","di","_mapPosToDefIndex","_isHollow","def","resolver","char","chres","isResolved","_placeholder","chunks","input","_appendTail","chunk2","stop2","_appendPlaceholderEnd","fromPos","toPos","toDefIndex","_isHiddenHollow","_isInput","stops","si","s","s2","_extractInput","defIndex","filter","h","_hollowsBefore","hi","head","inserted","insertSteps","removed","tailPos","tailDefIndex","tailAlignStopsPos","map","_mapDefIndexToPos","tailInputChunks","_extractInputChunks","lastHollowIndex","removeDirection","_nearestInputPos","_generateInsertSteps","istep","step","tres","_appendTailChunks","isComplete","show","unmasked","defs","index","initialDefIndex","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","ph","DEFAULT_PLACEHOLDER","join","_installDefinitions","_mask","PipeMask","multipass","_compiledMasks","m","_pipe","stepRes","tempRes","reduce","d","bindEvents","prototype","apply","RegExp","Array","Function","window"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}