{"version":3,"file":"imask.js","sources":["utils.js","masks/base.js","masks/regexp.js","masks/func.js","masks/pattern.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","import {conform} from '../utils';\r\n\r\n\r\nexport default\r\nclass BaseMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.mask = opts.mask;\r\n\r\n    this._listeners = {};\r\n    this._refreshingCount = 0;\r\n\r\n    this.saveState = this.saveState.bind(this);\r\n    this.processInput = this.processInput.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveState);\r\n    this.el.addEventListener('input', this.processInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveState);\r\n    this.el.removeEventListener('input', this.processInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    this.el.setSelectionRange(pos, pos);\r\n  }\r\n\r\n  saveState (ev) {\r\n    this._oldRawValue = this.rawValue;\r\n    this._oldUnmaskedValue = this.unmaskedValue;\r\n    this._oldSelection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    }\r\n  }\r\n\r\n  _changeState (details) {\r\n    details = {\r\n      cursorPos: !this._cursorChanging ?\r\n        this.cursorPos :\r\n        this._oldSelection.end,\r\n      oldSelection: this._oldSelection,\r\n      oldValue: this._oldRawValue,\r\n      oldUnmaskedValue: this._oldUnmaskedValue,\r\n      ...details\r\n    };\r\n\r\n    var inputValue = this.rawValue;\r\n    var res = inputValue;\r\n    res = conform(this.resolve(res, details),\r\n      res,\r\n      this._oldRawValue);\r\n\r\n    if (res !== inputValue) {\r\n      this.el.value = res;\r\n      this.cursorPos = details.cursorPos;\r\n      // also queue change cursor for some browsers\r\n      if (this._cursorChanging) clearTimeout(this._cursorChanging);\r\n      this._cursorChanging = setTimeout(() => {\r\n        this.cursorPos = details.cursorPos;\r\n        delete this._cursorChanging;\r\n      }, 0);\r\n    }\r\n\r\n    this._onChangeState();\r\n\r\n    return res;\r\n  }\r\n\r\n  _onChangeState () {\r\n    this._fireChangeEvents();\r\n    this.saveState();\r\n  }\r\n\r\n  get _isChanged () {\r\n    return (this.rawValue !== this._oldRawValue ||\r\n      this.unmaskedValue !== this._oldUnmaskedValue);\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    if (this._isChanged) this.fireEvent(\"accept\");\r\n  }\r\n\r\n  processInput (ev) {\r\n    if (!this._isChanged) return;\r\n    this._changeState();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    var listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  // override this\r\n  resolve (str, details) { return str; }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    this.el.value = str;\r\n    this._changeState({\r\n      cursorPos: str.length,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: str.length\r\n      },\r\n      oldValue: str\r\n    });\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.rawValue;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.rawValue = value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass RegExpMask extends BaseMask {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass FuncMask extends BaseMask {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import {conform} from '../utils';\r\nimport BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass PatternMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n\r\n    this._hollows = [];\r\n    this.placeholder = opts.placeholder;\r\n    this.definitions = {\r\n      ...PatternMask.DEFINITIONS,\r\n      ...opts.definitions\r\n    };\r\n\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n    this._alignCursorFriendly = this._alignCursorFriendly.bind(this);\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  _alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this._alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    this.el.addEventListener('click', this._alignCursorFriendly);\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    this.el.removeEventListener('click', this._alignCursorFriendly);\r\n  }\r\n\r\n  _installDefinitions (definitions) {\r\n    this._definitions = definitions;\r\n    this._charDefs = [];\r\n    var pattern = this.mask;\r\n\r\n    if (!pattern || !definitions) return;\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in definitions ?\r\n        PatternMask.DEF_TYPES.INPUT :\r\n        PatternMask.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternMask.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternMask.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternMask.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._buildResolvers();\r\n  }\r\n\r\n  _buildResolvers () {\r\n    this._resolvers = {};\r\n    for (var defKey in this.definitions) {\r\n      this._resolvers[defKey] = IMask.MaskFactory(this.el, {\r\n        mask: this.definitions[defKey]\r\n      });\r\n    }\r\n  }\r\n\r\n  _appendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    var overflow = false;\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(str.length); ci < tail.length; ++di) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      // failed\r\n      if (!def) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, di, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          if (!def.optional) chres = this._placeholder.char;\r\n          hollows.push(di);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows, overflow];\r\n  }\r\n\r\n  _extractInput (str, fromPos=0) {\r\n    var input = '';\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(fromPos); ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _isHollow (defIndex) {\r\n    return this._hollows.indexOf(defIndex) >= 0;\r\n  }\r\n\r\n  _isHiddenHollow (defIndex) {\r\n    return this._isHollow(defIndex) &&\r\n      this._charDefs[defIndex] && this._charDefs[defIndex].optional;\r\n  }\r\n\r\n  _hollowsBefore (defIndex) {\r\n    return this._hollows.filter(h => h < defIndex && this._isHiddenHollow(h));\r\n  }\r\n\r\n  _mapDefIndexToPos (defIndex) {\r\n    return defIndex - this._hollowsBefore(defIndex).length;\r\n  }\r\n\r\n  _mapPosToDefIndex (pos) {\r\n    var lastHollowIndex = pos;\r\n    // extend contiguous\r\n    while (this._isHiddenHollow(lastHollowIndex-1)) ++lastHollowIndex;\r\n\r\n    return pos + this._hollowsBefore(lastHollowIndex).length;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n    var hollows = this._hollows.slice();\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [[res, hollows.slice()]];\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(head.length); ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, ci, res) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          res += placeholderBuffer + conform(chres, ch); placeholderBuffer = '';\r\n          insertSteps.push([res, hollows.slice()]);\r\n        } else if (def.optional) {\r\n          if (hollows.indexOf(di) < 0) hollows.push(di);\r\n        }\r\n        if (chres || def.optional) ++di;\r\n        if (chres || !def.optional) ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var cursorPos = details.cursorPos;\r\n    var oldSelection = details.oldSelection;\r\n    var oldValue = details.oldValue;\r\n    var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n    // Math.max for opposite operation\r\n    var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n      // for Delete\r\n      oldValue.length - str.length, 0);\r\n    var insertedCount = cursorPos - startChangePos;\r\n\r\n\r\n    var head = str.substring(0, startChangePos);\r\n    var tail = str.substring(startChangePos + insertedCount);\r\n    var inserted = str.substr(startChangePos, insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    var lastHollowIndex = this._mapPosToDefIndex(startChangePos);\r\n    this._hollows = this._hollows.filter(h => h < lastHollowIndex);\r\n\r\n    var res = head;\r\n\r\n    // insert available\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n    for (var istep=insertSteps.length-1; istep >= 0; --istep) {\r\n      var step;\r\n      [step, this._hollows] = insertSteps[istep];\r\n      var [tres, thollows, overflow] = this._appendTail(step, tailInput);\r\n      if (!overflow) {\r\n        [res, this._hollows] = [tres, thollows];\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // if input at the end - append fixed\r\n    if (inserted && cursorPos === res.length) {\r\n      // append fixed at end\r\n      var appended = this._appendFixedEnd(res);\r\n      cursorPos += appended.length - res.length;\r\n      res = appended;\r\n    }\r\n\r\n    if (!inserted && removedCount) {\r\n      // if delete at right\r\n      if (oldSelection.end === cursorPos) {\r\n        for (;;++cursorPos) {\r\n          var di=this._mapPosToDefIndex(cursorPos);\r\n          var def = this._charDefs[di];\r\n          if (!def || def.type !== PatternMask.DEF_TYPES.FIXED) break;\r\n        }\r\n      }\r\n\r\n      // remove head fixed and hollows if removed at end\r\n      if (cursorPos === res.length) {\r\n        var di = this._mapPosToDefIndex(cursorPos-1);\r\n        var hasHollows = false;\r\n        for (; di > 0; --di) {\r\n          var def = this._charDefs[di];\r\n          if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n            if (this._isHollow(di)) hasHollows = true;\r\n            else break;\r\n          }\r\n        }\r\n        if (hasHollows) res = res.slice(0, di + 1);\r\n      }\r\n    }\r\n\r\n    // append placeholder\r\n    res = this._appendPlaceholderEnd(res);\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    // fire 'complete' after 'accept' event\r\n    super._fireChangeEvents();\r\n    if (this._isChanged && this.isComplete) this.fireEvent(\"complete\");\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.filter((def, di) =>\r\n      def.type === PatternMask.DEF_TYPES.INPUT && !def.optional &&\r\n      this._isHollow(di)).length;\r\n  }\r\n\r\n  _appendFixedEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length);; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      if (di >= res.length) res += def.char;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _appendPlaceholderEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length); di<this._charDefs.length; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) {\r\n        this._hollows.push(di);\r\n      }\r\n      if (this._placeholder.show === 'always') {\r\n        res += def.type === PatternMask.DEF_TYPES.FIXED ?\r\n          def.char :\r\n          !def.optional ?\r\n            this._placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    var str = this.rawValue;\r\n    var unmasked = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.unmasking && !this._isHollow(di) &&\r\n        (def.type === PatternMask.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci, str) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n      ++ci;\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this._hollows.length = 0;\r\n    var res;\r\n    [res, this._hollows] = this._appendTail('', str);\r\n    this.el.value = this._appendPlaceholderEnd(res);\r\n\r\n    this._onChangeState();\r\n  }\r\n\r\n  get placeholder () { return this._placeholder; }\r\n\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...PatternMask.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get placeholderLabel () {\r\n    return this._charDefs.map(def =>\r\n      def.type === PatternMask.DEF_TYPES.FIXED ?\r\n        def.char :\r\n        !def.optional ?\r\n          this._placeholder.char :\r\n          '').join('');\r\n  }\r\n\r\n  get definitions () { return this._definitions; }\r\n\r\n  set definitions (defs) {\r\n    this._installDefinitions(defs);\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get mask () { return this._mask; }\r\n\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n    if (this._initialized) this.definitions = this.definitions;\r\n  }\r\n\r\n  _alignCursor () {\r\n    var cursorDefIndex = this._mapPosToDefIndex(this.cursorPos);\r\n    for (var rPos = cursorDefIndex; rPos >= 0; --rPos) {\r\n      var rDef = this._charDefs[rPos];\r\n      var lPos = rPos-1;\r\n      var lDef = this._charDefs[lPos];\r\n      if (this._isHiddenHollow(lPos)) continue;\r\n\r\n      if ((!rDef || rDef.type === PatternMask.DEF_TYPES.INPUT && this._isHollow(rPos) && !this._isHiddenHollow(rPos)) &&\r\n        !this._isHollow(lPos)) {\r\n        cursorDefIndex = rPos;\r\n        if (!lDef || lDef.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      }\r\n    }\r\n    this.cursorPos = this._mapDefIndexToPos(cursorDefIndex);\r\n  }\r\n}\r\nPatternMask.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternMask.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternMask.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\n","import {isString} from './utils';\r\n\r\nimport BaseMask from './masks/base';\r\nimport RegExpMask from './masks/regexp';\r\nimport FuncMask from './masks/func';\r\nimport PatternMask from './masks/pattern';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  var mask = IMask.MaskFactory(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.rawValue = el.value;\r\n  return mask;\r\n}\r\n\r\nIMask.MaskFactory = function (el, opts) {\r\n  var mask = opts.mask;\r\n  if (mask instanceof BaseMask) return mask;\r\n  if (mask instanceof RegExp) return new RegExpMask(el, opts);\r\n  if (mask instanceof Function) return new FuncMask(el, opts);\r\n  if (isString(mask)) return new PatternMask(el, opts);\r\n  return new BaseMask(el, opts);\r\n}\r\nIMask.BaseMask = BaseMask;\r\nIMask.FuncMask = FuncMask;\r\nIMask.RegExpMask = RegExpMask;\r\nIMask.PatternMask = PatternMask;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","BaseMask","el","opts","mask","_listeners","_refreshingCount","saveState","bind","processInput","_onDrop","addEventListener","removeEventListener","unbindEvents","length","ev","_oldRawValue","rawValue","_oldUnmaskedValue","unmaskedValue","_oldSelection","selectionStart","cursorPos","details","_cursorChanging","end","inputValue","resolve","value","clearTimeout","setTimeout","_onChangeState","_fireChangeEvents","_isChanged","fireEvent","_changeState","handler","push","hIndex","indexOf","splice","listeners","forEach","l","preventDefault","stopPropagation","selectionEnd","pos","setSelectionRange","RegExpMask","test","FuncMask","PatternMask","_hollows","placeholder","definitions","DEFINITIONS","_alignCursor","_alignCursorFriendly","_initialized","_definitions","_charDefs","pattern","unmaskingBlock","optionalBlock","i","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","_buildResolvers","_resolvers","defKey","IMask","MaskFactory","tail","placeholderBuffer","hollows","slice","overflow","ci","di","_mapPosToDefIndex","def","resolver","char","chres","_placeholder","fromPos","input","_isHiddenHollow","_isHollow","defIndex","filter","h","_hollowsBefore","lastHollowIndex","head","inserted","insertSteps","oldSelection","oldValue","startChangePos","Math","min","start","removedCount","max","insertedCount","substring","substr","tailInput","_extractInput","_generateInsertSteps","istep","step","_appendTail","tres","thollows","appended","_appendFixedEnd","hasHollows","_appendPlaceholderEnd","isComplete","show","cursorDefIndex","rPos","rDef","lPos","lDef","_mapDefIndexToPos","unmasked","ph","DEFAULT_PLACEHOLDER","map","join","defs","_installDefinitions","_mask","bindEvents","RegExp","Function","window"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}