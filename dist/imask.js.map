{"version":3,"file":"imask.js","sources":["utils.js","masks/base.js","masks/regexp.js","masks/func.js","masks/pattern.js","masks/pipe.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nfunction extendDetailsAdjustments(str, details) {\r\n  var cursorPos = details.cursorPos;\r\n  var oldSelection = details.oldSelection;\r\n  var oldValue = details.oldValue;\r\n\r\n  var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n  var insertedCount = cursorPos - startChangePos;\r\n  // Math.max for opposite operation\r\n  var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n    // for Delete\r\n    oldValue.length - str.length, 0);\r\n  var head = str.substring(0, startChangePos);\r\n  var tail = str.substring(startChangePos + insertedCount);\r\n  var inserted = str.substr(startChangePos, insertedCount);\r\n  var removed = str.substr(startChangePos, removedCount);\r\n\r\n  return {\r\n    startChangePos,\r\n    head,\r\n    tail,\r\n    inserted,\r\n    removed,\r\n    ...details\r\n  };\r\n}\r\n","import {conform, extendDetailsAdjustments} from '../utils';\r\n\r\n\r\nexport default\r\nclass BaseMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.mask = opts.mask;\r\n\r\n    this._listeners = {};\r\n    this._refreshingCount = 0;\r\n    this._rawValue = \"\";\r\n    this._unmaskedValue = \"\";\r\n\r\n    this.saveSelection = this.saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  get rawValue () {\r\n    return this._rawValue;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    this.processInput(str, {\r\n      cursorPos: str.length,\r\n      oldValue: this.rawValue,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: this.rawValue.length\r\n      }\r\n    });\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.rawValue = value;\r\n  }\r\n\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this.saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    var listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  processInput (inputValue, details) {\r\n    details = {\r\n      cursorPos: this.cursorPos,\r\n      oldSelection: this._selection,\r\n      oldValue: this.rawValue,\r\n      oldUnmaskedValue: this.unmaskedValue,\r\n      ...details\r\n    };\r\n\r\n    details = extendDetailsAdjustments(inputValue, details);\r\n\r\n    var res = conform(this.resolve(inputValue, details),\r\n      inputValue,\r\n      this.rawValue);\r\n\r\n    this.updateElement(res, details.cursorPos);\r\n    return res;\r\n  }\r\n\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    this.el.setSelectionRange(pos, pos);\r\n    this.saveSelection();\r\n  }\r\n\r\n  saveSelection (ev) {\r\n    if (this.rawValue !== this.el.value) {\r\n      console.warn(\"Uncontrolled input change, refresh mask manually!\");\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n\r\n  updateElement (value, cursorPos) {\r\n    var unmaskedValue = this._calcUnmasked(value);\r\n    var isChanged = (this.unmaskedValue !== unmaskedValue ||\r\n      this.rawValue !== value);\r\n\r\n    this._unmaskedValue = unmaskedValue;\r\n    this._rawValue = value;\r\n\r\n    if (this.el.value !== value) this.el.value = value;\r\n    this.updateCursor(cursorPos);\r\n\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent(\"accept\");\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this._abortUpdateCursor();\r\n      this.cursorPos = this._changingCursorPos;\r\n    }, 10);\r\n  }\r\n\r\n  _abortUpdateCursor() {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  _onInput (ev) {\r\n    this._abortUpdateCursor();\r\n    this.processInput(this.el.value);\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  // override\r\n  resolve (str, details) { return str; }\r\n\r\n  _calcUnmasked (value) { return value; }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass RegExpMask extends BaseMask {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass FuncMask extends BaseMask {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import {conform} from '../utils';\r\nimport BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass PatternMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n\r\n    this._hollows = [];\r\n    this.placeholder = opts.placeholder;\r\n    this.definitions = {\r\n      ...PatternMask.DEFINITIONS,\r\n      ...opts.definitions\r\n    };\r\n\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n    this._alignCursorFriendly = this._alignCursorFriendly.bind(this);\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  _alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this._alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    this.el.addEventListener('click', this._alignCursorFriendly);\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    this.el.removeEventListener('click', this._alignCursorFriendly);\r\n  }\r\n\r\n  _installDefinitions (definitions) {\r\n    this._definitions = definitions;\r\n    this._charDefs = [];\r\n    var pattern = this.mask;\r\n\r\n    if (!pattern || !definitions) return;\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in definitions ?\r\n        PatternMask.DEF_TYPES.INPUT :\r\n        PatternMask.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternMask.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternMask.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternMask.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._buildResolvers();\r\n  }\r\n\r\n  _buildResolvers () {\r\n    this._resolvers = {};\r\n    for (var defKey in this.definitions) {\r\n      this._resolvers[defKey] = IMask.MaskFactory(this.el, {\r\n        mask: this.definitions[defKey]\r\n      });\r\n    }\r\n  }\r\n\r\n  _appendTail (str, tail, skipUnresolvedInput=true) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    var overflow = false;\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(str.length); ci < tail.length;) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      // failed\r\n      if (!def) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, di, str + placeholderBuffer) || '';\r\n        var isResolved = !!chres;\r\n\r\n        // if ok - next di\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n        } else {\r\n          if (!def.optional && skipUnresolvedInput) chres = this._placeholder.char;\r\n          if (hollows.indexOf(di) < 0) hollows.push(di);\r\n        }\r\n\r\n        if (chres) {\r\n          str += placeholderBuffer + conform(chres, ch);\r\n          placeholderBuffer = '';\r\n        }\r\n        if (chres || def.optional || !skipUnresolvedInput) ++di;\r\n        if (isResolved || !def.optional && !skipUnresolvedInput) ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n    }\r\n\r\n    return [str, hollows, overflow];\r\n  }\r\n\r\n  _extractInput (str, fromPos=0) {\r\n    var input = '';\r\n\r\n    for (var ci=0, di=this._mapPosToDefIndex(fromPos); ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _isHollow (defIndex) {\r\n    return this._hollows.indexOf(defIndex) >= 0;\r\n  }\r\n\r\n  _isHiddenHollow (defIndex) {\r\n    return this._isHollow(defIndex) &&\r\n      this._charDefs[defIndex] && this._charDefs[defIndex].optional;\r\n  }\r\n\r\n  _hollowsBefore (defIndex) {\r\n    return this._hollows.filter(h => h < defIndex && this._isHiddenHollow(h));\r\n  }\r\n\r\n  _mapDefIndexToPos (defIndex) {\r\n    return defIndex - this._hollowsBefore(defIndex).length;\r\n  }\r\n\r\n  _mapPosToDefIndex (pos) {\r\n    var defIndex = pos;\r\n    for (var hi=0; hi<this._hollows.length; ++hi) {\r\n      var h = this._hollows[hi];\r\n      if (h >= defIndex) break;\r\n      if (this._isHiddenHollow(h)) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var overflow = false;\r\n\r\n    // save hollow during generation\r\n    var hollows = this._hollows;\r\n\r\n    var insertSteps = [[head, hollows.slice()]];\r\n\r\n    for (var ci=0; ci<inserted.length && !overflow; ++ci) {\r\n      var ch = inserted[ci];\r\n      var [res, hollows, overflow] = this._appendTail(head, ch, false);\r\n      this._hollows = hollows;\r\n      if (!overflow && res !== head) {\r\n        insertSteps.push([res, hollows]);\r\n        head = res;\r\n      }\r\n    }\r\n\r\n    // pop hollows back\r\n    this._hollows = hollows;\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var cursorPos = details.cursorPos;\r\n    var startChangePos = details.startChangePos;\r\n    var inserted = details.inserted;\r\n    var removedCount = details.removed.length;\r\n    var tailInput = this._extractInput(details.tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    var lastHollowIndex = this._mapPosToDefIndex(startChangePos);\r\n    this._hollows = this._hollows.filter(h => h < lastHollowIndex);\r\n\r\n    var res = details.head;\r\n\r\n    // insert available\r\n    var insertSteps = this._generateInsertSteps(res, inserted);\r\n    for (var istep=insertSteps.length-1; istep >= 0; --istep) {\r\n      var step;\r\n      [step, this._hollows] = insertSteps[istep];\r\n      var [tres, thollows, overflow] = this._appendTail(step, tailInput);\r\n      if (!overflow) {\r\n        [res, this._hollows] = [tres, thollows];\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // if input at the end - append fixed\r\n    if (inserted && cursorPos === res.length) {\r\n      // append fixed at end\r\n      var appended = this._appendFixedEnd(res);\r\n      cursorPos += appended.length - res.length;\r\n      res = appended;\r\n    }\r\n\r\n    if (!inserted && removedCount) {\r\n      // if delete at right\r\n      if (details.oldSelection.end === cursorPos) {\r\n        for (;;++cursorPos) {\r\n          var di=this._mapPosToDefIndex(cursorPos);\r\n          var def = this._charDefs[di];\r\n          if (!def || def.type !== PatternMask.DEF_TYPES.FIXED) break;\r\n        }\r\n      }\r\n\r\n      // remove head fixed and hollows if removed at end\r\n      if (cursorPos === res.length) {\r\n        var di = this._mapPosToDefIndex(cursorPos-1);\r\n        var hasHollows = false;\r\n        for (; di > 0; --di) {\r\n          var def = this._charDefs[di];\r\n          if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n            if (this._isHollow(di)) hasHollows = true;\r\n            else break;\r\n          }\r\n        }\r\n        if (hasHollows) res = res.slice(0, di + 1);\r\n      }\r\n    }\r\n\r\n    // append placeholder\r\n    res = this._appendPlaceholderEnd(res);\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    // fire 'complete' after 'accept' event\r\n    super._fireChangeEvents();\r\n    if (this.isComplete) this.fireEvent(\"complete\");\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.filter((def, di) =>\r\n      def.type === PatternMask.DEF_TYPES.INPUT && !def.optional &&\r\n      this._isHollow(di)).length;\r\n  }\r\n\r\n  _appendFixedEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length);; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      if (di >= res.length) res += def.char;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _appendPlaceholderEnd (res) {\r\n    for (var di=this._mapPosToDefIndex(res.length); di<this._charDefs.length; ++di) {\r\n      var def = this._charDefs[di];\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT && !this._isHollow(di)) {\r\n        this._hollows.push(di);\r\n      }\r\n      if (this._placeholder.show === 'always') {\r\n        res += def.type === PatternMask.DEF_TYPES.FIXED ?\r\n          def.char :\r\n          !def.optional ?\r\n            this._placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  _calcUnmasked (str) {\r\n    var unmasked = '';\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (this._isHiddenHollow(di)) continue;\r\n\r\n      if (def.unmasking && !this._isHollow(di) &&\r\n        (def.type === PatternMask.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci, str) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n      ++ci;\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this._hollows.length = 0;\r\n    var res;\r\n    [res, this._hollows] = this._appendTail('', str);\r\n    this.updateElement(this._appendPlaceholderEnd(res));\r\n    this._alignCursor();\r\n  }\r\n\r\n  get placeholder () { return this._placeholder; }\r\n\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...PatternMask.DEFAULT_PLACEHOLDER,\r\n      ...ph\r\n    };\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get placeholderLabel () {\r\n    return this._charDefs.map(def =>\r\n      def.type === PatternMask.DEF_TYPES.FIXED ?\r\n        def.char :\r\n        !def.optional ?\r\n          this._placeholder.char :\r\n          '').join('');\r\n  }\r\n\r\n  get definitions () { return this._definitions; }\r\n\r\n  set definitions (defs) {\r\n    this._installDefinitions(defs);\r\n    if (this._initialized) this.unmaskedValue = this.unmaskedValue;\r\n  }\r\n\r\n  get mask () { return this._mask; }\r\n\r\n  set mask (mask) {\r\n    this._mask = mask;\r\n    if (this._initialized) this.definitions = this.definitions;\r\n  }\r\n\r\n  _alignCursor () {\r\n    var cursorDefIndex = this._mapPosToDefIndex(this.cursorPos);\r\n    for (var rPos = cursorDefIndex; rPos >= 0; --rPos) {\r\n      var rDef = this._charDefs[rPos];\r\n      var lPos = rPos-1;\r\n      var lDef = this._charDefs[lPos];\r\n      if (this._isHiddenHollow(lPos)) continue;\r\n\r\n      if ((!rDef || rDef.type === PatternMask.DEF_TYPES.INPUT && this._isHollow(rPos) && !this._isHiddenHollow(rPos)) &&\r\n        !this._isHollow(lPos)) {\r\n        cursorDefIndex = rPos;\r\n        if (!lDef || lDef.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      }\r\n    }\r\n    this.cursorPos = this._mapDefIndexToPos(cursorDefIndex);\r\n  }\r\n}\r\nPatternMask.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternMask.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternMask.DEFAULT_PLACEHOLDER = {\r\n  show: 'lazy',\r\n  char: '_'\r\n};\r\n","import BaseMask from './base';\r\nimport {extendDetailsAdjustments} from '../utils';\r\n\r\n\r\nexport default\r\nclass PipeMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n\r\n    this.multipass = opts.multipass;\r\n\r\n    this._compiledMasks = this.mask.map(m => IMask.MaskFactory(el, m));\r\n  }\r\n\r\n  resolve (str, details) {\r\n    var res = this._pipe(str, details);\r\n    if (!this.multipass) return res;\r\n\r\n    var cursorPos = details.cursorPos;\r\n\r\n    var stepRes;\r\n    var tempRes = res;\r\n\r\n    while (stepRes !== tempRes) {\r\n      stepRes = tempRes;\r\n      tempRes = this._pipe(stepRes, {\r\n        cursorPos: stepRes.length,\r\n        oldValue: stepRes,\r\n        oldSelection: {\r\n          start: 0,\r\n          end: stepRes.length\r\n        }\r\n      });\r\n    }\r\n\r\n    details.cursorPos = cursorPos - (res.length - stepRes.length);\r\n\r\n    return stepRes;\r\n  }\r\n\r\n  _pipe (str, details) {\r\n    return this._compiledMasks.reduce((s, m) => {\r\n      var d = extendDetailsAdjustments(s, details);\r\n      var res = m.resolve(s, d);\r\n      details.cursorPos = d.cursorPos;\r\n      return res;\r\n    }, str);\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    this._compiledMasks.forEach(m => {\r\n      m.bindEvents();\r\n      // disable basemask events for child masks\r\n      BaseMask.prototype.unbindEvents.apply(m);\r\n    });\r\n  }\r\n\r\n  unbindEvents () {\r\n    super.unbindEvents();\r\n    this._compiledMasks.forEach(m => m.unbindEvents());\r\n  }\r\n}\r\n","import {isString} from './utils';\r\n\r\nimport BaseMask from './masks/base';\r\nimport RegExpMask from './masks/regexp';\r\nimport FuncMask from './masks/func';\r\nimport PatternMask from './masks/pattern';\r\nimport PipeMask from './masks/pipe';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  var mask = IMask.MaskFactory(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.rawValue = el.value;\r\n  return mask;\r\n}\r\n\r\nIMask.MaskFactory = function (el, opts) {\r\n  var mask = opts.mask;\r\n  if (mask instanceof BaseMask) return mask;\r\n  if (mask instanceof RegExp) return new RegExpMask(el, opts);\r\n  if (mask instanceof Array) return new PipeMask(el, opts);\r\n  if (isString(mask)) return new PatternMask(el, opts);\r\n  if (mask.prototype instanceof BaseMask) return new mask(el, opts);\r\n  if (mask instanceof Function) return new FuncMask(el, opts);\r\n  return new BaseMask(el, opts);\r\n}\r\nIMask.BaseMask = BaseMask;\r\nIMask.FuncMask = FuncMask;\r\nIMask.RegExpMask = RegExpMask;\r\nIMask.PatternMask = PatternMask;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","extendDetailsAdjustments","details","cursorPos","oldSelection","oldValue","startChangePos","Math","min","start","insertedCount","removedCount","max","end","length","head","substring","tail","inserted","substr","removed","BaseMask","el","opts","mask","_listeners","_refreshingCount","_rawValue","_unmaskedValue","saveSelection","bind","_onInput","_onDrop","ev","handler","push","hIndex","indexOf","splice","addEventListener","removeEventListener","listeners","forEach","l","inputValue","_selection","rawValue","unmaskedValue","resolve","updateElement","value","warn","selectionStart","unbindEvents","_calcUnmasked","isChanged","updateCursor","_fireChangeEvents","fireEvent","_delayUpdateCursor","_abortUpdateCursor","_changingCursorPos","_cursorChanging","setTimeout","processInput","preventDefault","stopPropagation","selectionEnd","pos","setSelectionRange","RegExpMask","test","FuncMask","PatternMask","_hollows","placeholder","definitions","DEFINITIONS","_alignCursor","_alignCursorFriendly","_initialized","_definitions","_charDefs","pattern","unmaskingBlock","optionalBlock","i","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","_buildResolvers","_resolvers","defKey","IMask","MaskFactory","skipUnresolvedInput","placeholderBuffer","hollows","slice","overflow","ci","di","_mapPosToDefIndex","def","resolver","char","chres","isResolved","_placeholder","fromPos","input","_isHiddenHollow","_isHollow","defIndex","filter","h","_hollowsBefore","hi","insertSteps","_appendTail","tailInput","_extractInput","lastHollowIndex","_generateInsertSteps","istep","step","tres","thollows","appended","_appendFixedEnd","hasHollows","_appendPlaceholderEnd","isComplete","show","unmasked","cursorDefIndex","rPos","rDef","lPos","lDef","_mapDefIndexToPos","ph","DEFAULT_PLACEHOLDER","map","join","defs","_installDefinitions","_mask","PipeMask","multipass","_compiledMasks","m","_pipe","stepRes","tempRes","reduce","s","d","bindEvents","prototype","apply","RegExp","Array","Function","window"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}