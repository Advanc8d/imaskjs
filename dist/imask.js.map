{"version":3,"file":"imask.js","sources":["utils.js","masks/base.js","masks/regexp.js","masks/func.js","masks/pattern.js","imask.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n","import {conform} from '../utils';\r\n\r\n// TODO\r\n// - empty placeholder\r\n// - !progressive\r\n// - validateOnly\r\n// - add comments\r\n\r\n\r\nexport default\r\nclass BaseMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.mask = opts.mask;\r\n\r\n    this._listeners = {};\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this.saveState.bind(this));\r\n    this.el.addEventListener('input', this.processInput.bind(this));\r\n    this.el.addEventListener('drop', this._onDrop.bind(this));\r\n  }\r\n\r\n  saveState (ev) {\r\n    this._oldValue = this.el.value;\r\n    this._oldSelection = {\r\n      start: this.el.selectionStart,\r\n      end: this.el.selectionEnd\r\n    }\r\n  }\r\n\r\n  processInput (ev) {\r\n     var inputValue = this.el.value;\r\n    // use selectionEnd for handle Undo\r\n    var cursorPos = this.el.selectionEnd;\r\n\r\n    // var res = inputValue\r\n    //   .split('')\r\n    //   .map((ch, ...args) => {\r\n    //     var res = this.charResolver.resolve(ch, ...args);\r\n    //     return conform(res, ch);\r\n    //   })\r\n    //   .join('');\r\n\r\n    var details = {\r\n      oldSelection: this._oldSelection,\r\n      cursorPos: cursorPos,\r\n      oldValue: this._oldValue\r\n    };\r\n\r\n    var res = inputValue;\r\n    res = conform(this.resolve(res, details),\r\n      res,\r\n      this._oldValue);\r\n\r\n    if (res !== inputValue) {\r\n      this.el.value = res;\r\n      cursorPos = details.cursorPos;\r\n    }\r\n    this.el.selectionStart = this.el.selectionEnd = cursorPos;\r\n\r\n    if (res !== this._oldValue) this.fireEvent(\"accept\");\r\n    return res;\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    var hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    var listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  // override this\r\n  resolve (str, details) { return str; }\r\n\r\n  get rawValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set rawValue (str) {\r\n    var details = {\r\n      startChangePos: 0,\r\n      oldSelection: {\r\n        start: 0,\r\n        end: this.el.value.length\r\n      },\r\n      removedCount: this.el.value.length,\r\n      insertedCount: str.length,\r\n      oldValue: this.el.value\r\n    };\r\n    this.el.value = conform(this.resolve(str, details), this.el.value);\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.el.value;\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.el.value = value;\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\nexport default\r\nclass RegExpMask extends BaseMask {\r\n  resolve (str) {\r\n    return this.mask.test(str);\r\n  }\r\n}\r\n","import BaseMask from './base';\r\n\r\nexport default\r\nclass FuncMask extends BaseMask {\r\n  resolve (...args) {\r\n    return this.mask(...args);\r\n  }\r\n}\r\n","import {conform} from '../utils';\r\nimport BaseMask from './base';\r\n\r\n\r\nexport default\r\nclass PatternMask extends BaseMask {\r\n  constructor (el, opts) {\r\n    super(el, opts);\r\n    var pattern = this.mask;\r\n    this.placeholder = opts.placeholder;\r\n    this._definitions = PatternMask.DEFINITIONS;\r\n    this._charDefs = [];\r\n    this._hollows = [];\r\n\r\n    if (opts.definitions) {\r\n      for (var def in opts.definitions) {\r\n        this._definitions[def] = opts.definitions[def];\r\n      }\r\n    }\r\n\r\n    var unmaskingBlock = false;\r\n    var optionalBlock = false;\r\n    for (var i=0; i<pattern.length; ++i) {\r\n      var ch = pattern[i];\r\n      var type = !unmaskingBlock && ch in this._definitions ?\r\n        PatternMask.DEF_TYPES.INPUT :\r\n        PatternMask.DEF_TYPES.FIXED;\r\n      var unmasking = type === PatternMask.DEF_TYPES.INPUT || unmaskingBlock;\r\n      var optional = type === PatternMask.DEF_TYPES.INPUT && optionalBlock;\r\n\r\n      if (ch === '{' || ch === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '[' || ch === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\\\\') {\r\n        ++i;\r\n        ch = pattern[i];\r\n        // TODO validation\r\n        if (!ch) break;\r\n        type = PatternMask.DEF_TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push({\r\n        char: ch,\r\n        type: type,\r\n        optional: optional,\r\n        unmasking: unmasking\r\n      });\r\n    }\r\n\r\n    this._resolvers = {};\r\n    for (var defKey in this._definitions) {\r\n      this._resolvers[defKey] = IMask.MaskFactory(this.el, {\r\n        mask: this._definitions[defKey]\r\n      });\r\n    }\r\n  }\r\n\r\n  bindEvents () {\r\n    super.bindEvents();\r\n    ['click', 'focus'].forEach(ev =>\r\n      this.el.addEventListener(ev, this._alignCursor.bind(this)));\r\n  }\r\n\r\n  _tryAppendTail (str, tail) {\r\n    var placeholderBuffer = '';\r\n    var hollows = this._hollows.slice();\r\n    for (var ci=0, di=str.length; ci < tail.length; ++di) {\r\n      var ch = tail[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      // failed\r\n      if (!def) return;\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        var chres = resolver.resolve(ch, di, str) || '';\r\n        if (chres) {\r\n          chres = conform(chres, ch);\r\n          ++ci;\r\n        } else {\r\n          chres = this._placeholder.char;\r\n          hollows.push(di);\r\n        }\r\n        str += placeholderBuffer + chres;\r\n        placeholderBuffer = '';\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n      }\r\n    }\r\n\r\n    return [str, hollows];\r\n  }\r\n\r\n  _extractInput (str, startDefIndex=0) {\r\n    var input = '';\r\n    for (var di=startDefIndex, ci=0; ci<str.length && di<this._charDefs.length; ++ci, ++di) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[di];\r\n\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT &&\r\n        this._hollows.indexOf(di) < 0) input += ch;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _generateInsertSteps (head, inserted) {\r\n    var res = head;\r\n\r\n    var placeholderBuffer = '';\r\n    var insertSteps = [res];\r\n    for (var ci=0, di=head.length; ci<inserted.length;) {\r\n      var def = this._charDefs[di];\r\n      if (!def) break;\r\n\r\n      var ch = inserted[ci];\r\n      var chres = '';\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        var resolver = this._resolvers[def.char];\r\n        chres = resolver.resolve(ch, ci) || '';\r\n        // if ok - next di\r\n        if (chres) {\r\n          ++di;\r\n          res += placeholderBuffer; placeholderBuffer = '';\r\n          chres = conform(chres, ch);\r\n        }\r\n        ++ci;\r\n      } else {\r\n        placeholderBuffer += def.char;\r\n\r\n        if (ch === def.char) ++ci;\r\n        ++di;\r\n      }\r\n\r\n      res += chres;\r\n      insertSteps[ci] = res;\r\n    }\r\n\r\n    return insertSteps;\r\n  }\r\n\r\n  resolve (str, details) {\r\n    // TODO\r\n    if (!details) return '';\r\n    // console.log(details);\r\n\r\n\r\n    var cursorPos = details.cursorPos;\r\n    var oldSelection = details.oldSelection;\r\n    var oldValue = details.oldValue;\r\n    var startChangePos = Math.min(cursorPos, oldSelection.start);\r\n    // Math.max for opposite operation\r\n    var removedCount = Math.max((oldSelection.end - startChangePos) ||\r\n      // for Delete\r\n      oldValue.length - str.length, 0);\r\n    var insertedCount = cursorPos - startChangePos;\r\n\r\n\r\n    var head = str.substring(0, startChangePos);\r\n    var tail = str.substring(startChangePos + insertedCount);\r\n    var inserted = str.substr(startChangePos, insertedCount);\r\n\r\n    var tailInput = this._extractInput(tail, startChangePos + removedCount);\r\n\r\n    // remove hollows after cursor\r\n    this._hollows = this._hollows.filter(h => h < startChangePos);\r\n\r\n    var insertSteps = this._generateInsertSteps(head, inserted);\r\n\r\n    var res = head;\r\n    for (var istep=insertSteps.length-1; istep >= 0; --istep) {\r\n      var step = insertSteps[istep];\r\n      var result = this._tryAppendTail(step, tailInput);\r\n      if (result) {\r\n        [res, this._hollows] = result;\r\n        cursorPos = step.length;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var def;\r\n    // append fixed at end if inserted\r\n    if (inserted) {\r\n      var appended = this._appendFixedEnd(res);\r\n      cursorPos += appended.length - res.length;\r\n      res = appended;\r\n    }\r\n\r\n    // remove head fixed and hollows if removed at end\r\n    if (!inserted && cursorPos === res.length) {\r\n      var di = cursorPos - 1;\r\n      var hasHollows = false;\r\n      for (; di > 0; --di) {\r\n        def = this._charDefs[di];\r\n        if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n          if (this._hollows.indexOf(di) >= 0) hasHollows = true;\r\n          else break;\r\n        }\r\n      }\r\n      if (hasHollows) res = res.slice(0, di);\r\n    }\r\n\r\n    // append placeholder if in 'always' mode\r\n    var ph = this.placeholder;\r\n    if (ph.show === PatternMask.SHOW_PH_TYPES.ALWAYS) {\r\n      for(var hi=res.length; hi<ph.label.length; ++hi) {\r\n        if (this._charDefs[hi].type === PatternMask.DEF_TYPES.INPUT)\r\n          this._hollows.push(hi);\r\n      }\r\n      res += ph.label.substr(res.length);\r\n    }\r\n    details.cursorPos = cursorPos;\r\n\r\n    return res;\r\n  }\r\n\r\n  processInput (ev) {\r\n    var res = super.processInput(ev);\r\n    if (res !== this._oldValue && this._isComplete(res)) this.fireEvent(\"complete\");\r\n  }\r\n\r\n  _isComplete (str) {\r\n    var defInputs = this._charDefs.filter(def => def.type === PatternMask.DEF_TYPES.INPUT);\r\n    return this._extractInput(str).length === defInputs.length;\r\n  }\r\n\r\n  _appendFixedEnd (res) {\r\n    var pos = res.length;\r\n    for (;; ++pos) {\r\n      var def = this._charDefs[pos];\r\n      if (!def || def.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      if (pos >= res.length) res += def.char;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    var str = this.el.value;\r\n    var unmasked = '';\r\n    for (var ci=0; ci<str.length && ci<this._charDefs.length; ++ci) {\r\n      var ch = str[ci];\r\n      var def = this._charDefs[ci];\r\n\r\n      if (def.unmasking && !this._hollows.indexOf(ci) >= 0 &&\r\n        (def.type === PatternMask.DEF_TYPES.INPUT && this._resolvers[def.char].resolve(ch, ci) ||\r\n          def.char === ch)) {\r\n        unmasked += ch;\r\n      }\r\n    }\r\n    return unmasked;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    var res = '';\r\n\r\n    for (var ci=0, di=0; ci<str.length && di<this._charDefs.length;) {\r\n      var def = this._charDefs[di];\r\n      var ch = str[ci];\r\n\r\n      var chres = '';\r\n      if (def.type === PatternMask.DEF_TYPES.INPUT) {\r\n        if (this._resolvers[def.char].resolve(ch, ci)) {\r\n          chres = ch;\r\n          ++di;\r\n        }\r\n        ++ci;\r\n      } else {\r\n        chres = def.char;\r\n        if (def.unmasking && def.char === ch) ++ci;\r\n        ++di;\r\n      }\r\n      res += chres;\r\n    }\r\n    res = this._appendFixedEnd(res);\r\n    this._hollows.length = 0;\r\n\r\n    this.el.value = res;\r\n  }\r\n\r\n  get placeholder () {\r\n    return {\r\n      ...this._placeholder,\r\n      label: this.placeholderLabel\r\n    }\r\n  }\r\n\r\n  set placeholder (ph) {\r\n    this._placeholder = {\r\n      ...{\r\n        char: PatternMask.DEFAULT_CHAR_PLACEHOLDER\r\n      },\r\n      ...ph\r\n    };\r\n  }\r\n\r\n  get placeholderLabel () {\r\n    return this._charDefs.map(def =>\r\n      def.type === PatternMask.DEF_TYPES.FIXED ?\r\n        def.char :\r\n        !def.optional ?\r\n          this._placeholder.char :\r\n          '').join('');\r\n  }\r\n\r\n  _alignCursor () {\r\n    var cursorPos = this.el.selectionEnd;\r\n    for (var rPos = cursorPos; rPos >= 0; --rPos) {\r\n      var rDef = this._charDefs[rPos];\r\n      var lPos = rPos-1;\r\n      var lDef = this._charDefs[lPos];\r\n      if ((!rDef || rDef.type === PatternMask.DEF_TYPES.INPUT && this._hollows.indexOf(rPos) > -1) &&\r\n        this._hollows.indexOf(lPos) < 0) {\r\n        cursorPos = rPos;\r\n        if (!lDef || lDef.type === PatternMask.DEF_TYPES.INPUT) break;\r\n      }\r\n    }\r\n    this.el.selectionStart = this.el.selectionEnd = cursorPos;\r\n  }\r\n}\r\nPatternMask.DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternMask.DEF_TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n}\r\nPatternMask.DEFAULT_CHAR_PLACEHOLDER = '_';\r\nPatternMask.SHOW_PH_TYPES = {\r\n  ALWAYS: 'always',\r\n  INSIDE: 'inside'\r\n}\r\n","import {isString} from './utils';\r\n\r\nimport BaseMask from './masks/base';\r\nimport RegExpMask from './masks/regexp';\r\nimport FuncMask from './masks/func';\r\nimport PatternMask from './masks/pattern';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n  var mask = IMask.MaskFactory(el, opts);\r\n  mask.bindEvents();\r\n  // refresh\r\n  mask.rawValue = el.value;\r\n  return mask;\r\n}\r\n\r\nIMask.MaskFactory = function (el, opts) {\r\n  var mask = opts.mask;\r\n  if (mask instanceof BaseMask) return mask;\r\n  if (mask instanceof RegExp) return new RegExpMask(el, opts);\r\n  if (mask instanceof Function) return new FuncMask(el, opts);\r\n  if (isString(mask)) return new PatternMask(el, opts);\r\n  return new BaseMask(el, opts);\r\n}\r\nIMask.BaseMask = BaseMask;\r\nIMask.FuncMask = FuncMask;\r\nIMask.RegExpMask = RegExpMask;\r\nIMask.PatternMask = PatternMask;\r\nwindow.IMask = IMask;\r\n"],"names":["isString","str","String","conform","res","fallback","BaseMask","el","opts","mask","_listeners","addEventListener","saveState","bind","processInput","_onDrop","ev","_oldValue","value","_oldSelection","selectionStart","selectionEnd","inputValue","cursorPos","details","resolve","fireEvent","handler","push","hIndex","indexOf","splice","listeners","forEach","l","preventDefault","stopPropagation","length","RegExpMask","test","FuncMask","PatternMask","pattern","placeholder","_definitions","DEFINITIONS","_charDefs","_hollows","definitions","def","unmaskingBlock","optionalBlock","i","ch","type","DEF_TYPES","INPUT","FIXED","unmasking","optional","_resolvers","defKey","IMask","MaskFactory","_alignCursor","tail","placeholderBuffer","hollows","slice","ci","di","resolver","char","chres","_placeholder","startDefIndex","input","head","inserted","insertSteps","oldSelection","oldValue","startChangePos","Math","min","start","removedCount","max","end","insertedCount","substring","substr","tailInput","_extractInput","filter","h","_generateInsertSteps","istep","step","result","_tryAppendTail","appended","_appendFixedEnd","hasHollows","ph","show","SHOW_PH_TYPES","ALWAYS","hi","label","_isComplete","defInputs","pos","rPos","rDef","lPos","lDef","unmasked","placeholderLabel","DEFAULT_CHAR_PLACEHOLDER","map","join","bindEvents","rawValue","RegExp","Function","window"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}